type Aggregation {
  name: String
  values: [AggregationOption!]
}

type AggregationFinal {
  name: String
  values: [AggregationOptionFinal!]
}

type AggregationOption {
  aggregation: AggregationFinal
  count: Int
  description: [Description!]
  value: String
  value2: String
}

type AggregationOptionFinal {
  count: Int
  description: [Description!]
  value: String
  value2: String
}

type Assortment {
  carType: String
  components: [CarComponentWithCarKey!]!
  engine: String
  gearbox: String
  modelYear: Float!
  salesVersion: String
  structureWeek: Float
  carTypes: [ComponentWithExceptions!]!
  colors: [ComponentWithExceptions!]!
  colours: [ComponentWithExceptions!]! @deprecated(reason: "Use `colors` instead")
  engines: [ComponentWithExceptions!]!
  features: [ComponentWithExceptions!]!
  gearboxes: [ComponentWithExceptions!]!
  marketingCodes: [ComponentWithExceptions!]!
  options(optionType: OptionType): [ComponentWithExceptions!]!
  packages: [ComponentWithExceptions!]!
  pno12s: [Pno12!]!
  sMessages: [ComponentWithExceptions!]!
  salesVersions: [ComponentWithExceptions!]!
  steerings: [ComponentWithExceptions!]!
  upholsteries: [ComponentWithExceptions!]!
}

type Availability {
  available: Boolean
  fleetManagement: FleetManagement
  visible: Boolean
}

enum BaseColour {
  BLACK
  BLUE
  BROWN
  GRAY
  GREEN
  ORANGE
  RED
  SILVER
  VIOLET
  WHITE
  YELLOW
}

"""Base Color Property"""
type BaseColourProperty {
  enumDescription: String
  formatted: String
  label: String
  value: BaseColour
  valueDescription: String
}

"""Base colours"""
type BaseColours {
  black: BaseColourProperty!
  blue: BaseColourProperty!
  brown: BaseColourProperty!
  gray: BaseColourProperty!
  green: BaseColourProperty!
  orange: BaseColourProperty!
  red: BaseColourProperty!
  silver: BaseColourProperty!
  violet: BaseColourProperty!
  white: BaseColourProperty!
  yellow: BaseColourProperty!
}

type Body {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!

  """Content carries localized information about the component."""
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarComponentContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type BODY {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: BODY_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
}

type BODY_DISPLAY_TYPE {
  key: String
  name: String
}

enum Brand {
  POLESTAR
  VCC
}

type BrandOccurenceDateTime {
  date: String!
  occurence: String!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum CamshaftType {
  DOHC
  SOHC
}

"""Camshaft Type Property"""
type CamshaftTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: CamshaftType
  valueDescription: String
}

"""Camshaft types"""
type CamshaftTypes {
  dohc: CamshaftTypeProperty!
  sohc: CamshaftTypeProperty!
}

"""Base for all Car related information in the graph."""
type Car {
  carKey: CarKey!

  """
  ### [Configuration](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIhVFcREEYKbAAxwmwijFUjagyfQsTABMVPSCqizSIAC%2BQA&referrer=operation_collections&variant=staging)
  Configuration should be used when you want to initiate configuration on a car. However, if you already have a token, you should probably user the configurationByToken field instead. 
  """
  configuration(configurationWindow: ConfigurationWindow): CarConfiguration

  """
  ### [Configuration by Policy](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTKVpEAAy1%2BAJk5NavCkzsQ20wREkWOHFqCTtpDHoWJhAAXyA&referrer=operation_collections&variant=staging)
  Initiate a configuration for this car by making it valid in this policy.
  """
  configurationByPolicy(
    """Client"""
    client: String
    configurationWindow: ConfigurationWindow = Current

    """Edition option code"""
    editionOptionCode: String
    fixComponents: Boolean

    """model year to transfer to"""
    modelYear: Int

    """Pno12 to transfer to"""
    pno12: String

    """A policy."""
    policy: String!

    """Selection strategy"""
    selectionStrategy: ConfigurationSelectionStrategy

    """structure week to transfer to"""
    structureWeek: Int
  ): CarConfiguration!

  """
  ### [Configuration By Token](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIhaABmkwKMVmwBM0uBD5Pe026LZxempqJnpXDHEIFlcQAF8gA&referrer=operation_collections&variant=staging)
  
  If you don't have a token, you should probably use configurationByPolicy instead, or just configuration (depends on your context). 
  Some examples can be found **[link](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?collectionId=4c7399bf-1f11-49e5-ac16-38f4848d8336&focusCollectionId=4c7399bf-1f11-49e5-ac16-38f4848d8336&overlay=view-collection-details&variant=staging)**
  """
  configurationByToken(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String!
  ): CarConfiguration!
  marketConfiguration: MarketConfigurationList
  offerKey: JSON
  dataVisibility: CarVisibility!
  efficiencyClassification: EfficiencyClassification
  environmentalData: EnvironmentalData!
  safetyRating(locale: String!, published: Boolean = true): SafetyRating
  priceSummary(priceConfigInput: PriceConfigurationInput!): CarPriceSummary
  body: Body
  carKeyExpanded: CarKeyExpanded!
  carType: CarType
  color: Colour
  colour: Colour @deprecated(reason: "Use `color` instead")
  commercialModelYear: CommercialModelYear
  details(
    """Defaults to the query locale"""
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarDetails @deprecated(reason: "Use `content` instead (for example `colour.content`)")
  displayName(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): String
  driveline: Driveline
  edition(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent
  engine: Engine
  features: [Feature!]
  futureCommercialModelYears: [CommercialModelYear!]
  gearbox: Gearbox
  globalFeatures(
    """Defaults to true"""
    includeAccessories: Boolean = true

    """
    Used to fetch features based on a stale KDP version. Default value is null
    """
    version: String = null
  ): [GlobalFeature!]!
  level(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent!
  marketingCode: MarketingCode!
  model(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent
  modelFamily(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent
  options(optionType: OptionType): [Option!]
  packages: [Package!]
  pno: Pno
  priceListDisplayName(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): String
  productLine(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent
  sMessage: SMessage
  salesVersion: SalesVersion
  steering: Steering
  theme(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent
  trim(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent
  trimFamily(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): SalesLevelContent

  """Contains all tyre energy efficiency labels for this car"""
  tyreLabels(
    locale: String!

    """Defaults to market part of locale"""
    market: String
  ): [TyreLabel!]
  upholstery: Upholstery
  wheels(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): [WheelContent!]

  """
  The different visualization sets available. If the set of features/options passed in would produce multiple visualization sets, they are all returned. The first object in the list is usually the one you want to use.
  """
  visualizations(
    """
    The market (two letter country code) or full locale to fetch visualizations for.
    """
    marketOrLocale: String!
  ): [Visualization!]
}

type CAR_CONFIGURATION {
  """Car type is a car model or pno3"""
  carType: String

  """Engine code of a selected car configuration"""
  engine: String

  """Gearbox code of a selected car configuration"""
  gearbox: String

  """Body code of a selected car configuration"""
  body: String

  """Sales version code of a selected car configuration"""
  salesVersion: String

  """Marketing code of a selected car configuration"""
  market: String

  """Steering code of a selected car configuration"""
  steering: String

  """Color code of a selected car configuration"""
  color: String

  """Upholsery code of a selected car configuration"""
  uph: String

  """S-Message code of a selected car configuration"""
  sMessage: String

  """This field contains options with comma separated"""
  history: String

  """Model year of a selected car configuration"""
  modelYear: Int

  """Commercial Model Year"""
  commercialModelYear: COMMERCIAL_MODEL_YEAR

  """SpecMarket or ProgramMarket of a configurtion"""
  specMarket: String

  """Options code of a selected car configuration"""
  options: [String!]

  """
  Returns the edition option code if the starting configuration represents an edition car, 
  and returns null if it's not representing an edition car. 
  """
  editionOptionCode: String

  """Packages code of a selected car configuration"""
  packages: [String!]

  """Pno3 or CarType"""
  pno3: String

  """
  Pno12 code which is a combination of carType, Engine, SV, body, gearbox, steering and Marketing code
  """
  pno12: String

  """
  This is a pure Pno34, first 34 characters of a product string - start from carType till S-Msg
  """
  pno34: String

  """
  Pno34 string that contains market model year, model, pno12, color, uph, options, packs etc.
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Pno34 string that contains pno34 and options, without pack"""
  pno34PlusOptions: String

  """Pno34 string without accessories and pack"""
  pno34PlusOptionsWithoutAccessories: String

  """Holds preconfiguration name if the state belongs to preconfiguration"""
  preconfigurationName: String
}

type CAR_CONFIGURATION_DATA {
  """Display name of the starting point level item/ component"""
  displayName: String

  """This is not used in starting point query"""
  modelYear: Int

  """This is not used in starting point query"""
  uspHeader: String

  """
  This contains uspPattern defined in global meta data under TRIM_LEVEL or EDITION or TRIM_LEVEL_EXCEPTION
  """
  usp: [String!]

  """This is not used in starting point query"""
  carConfiguration: String

  """
  This provides the summary information of configuration data
  For more details about carConfigurationDecoded, please refer this link : 
  https://intranet.volvocars.net/sites/CCH/SitePages/carConfigurationDecoded.aspx
  """
  carConfigurationDecoded: CAR_CONFIGURATION

  """Short token of a configuration which lives for shorter period of time"""
  token: String

  """
  State holds the state of a configuration, like car token etc
  For more details about state, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/State.aspx
  """
  state: STATE

  """
  This field holds the interior and exterior image urls whatever received from CAS
  """
  media(types: [String], angles: [Int]): MEDIAS

  """This field is not used in starting point query"""
  deliveryInformation: DELIVERY_INFORMATION
}

"""Base for all Car-Component's in the graph. """
type CarComponent {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  configurations(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String
  ): [CarConfiguration!]
  inConfiguration(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String
  ): CarComponentConfiguration
  partOf(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String
  ): [CarComponent!]
  requires(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String
  ): [CarComponent!]
  requiresExclusively(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String
  ): [[CarComponent!]!]
  type: CarComponentType!

  """Content carries localized information about the component."""
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarComponentContent
  globalName: String
  tags: [String!]
}

type CarComponentConfiguration {
  included: Boolean!
  selected: Boolean!
}

interface CarComponentContent {
  description: StringProperty
  displayName: StringProperty
  image: ImageProperty
  shortDescription: StringProperty
  video: VideoProperty
}

enum CarComponentType {
  BODY
  COLOR
  DRIVELINE
  ENGINE
  FEATURE
  GEARBOX
  MARKETING_CODE
  MODEL_YEAR
  OFFER
  OPTION
  PACKAGE
  PNO3
  SALES_VERSION
  SPEC_MARKET
  STEERING
  STRUCTURE_WEEK
  S_MESSAGE
  UPHOLSTERY
}

type CarComponentWithCarKey {
  carKey: CarKey!
  code: String!
  type: String!
}

type CarComponentWithConfigurations {
  code: String!
  configurations: [CarConfiguration!]!
  type: String!
}

type CarConfiguration {
  appliedChange: RequiredChange
  car: Car
  carKey: CarKey
  components(type: CarComponentType, types: [CarComponentType!]): [CarComponent!]!
  defaultCar: Car
  errors: [ConfigurationError!]
  offerKey: JSON
  token: ConfigurationToken
}

input CarConfigurationSpecification {
  color: String
  fixComponents: Boolean = false
  modelYear: Int!
  options: [String!]
  packages: [String!]
  pno12: String!
  sMessage: String
  specMarket: String!
  structureWeek: String
  upholstery: String
}

type CarDetails {
  carKey: CarKey
  efficiencyClassification: EfficiencyClassification
  locale: String
  safetyRating(locale: String, published: Boolean = true): SafetyRating
  carType: CarTypeContent
  categories: EnrichedCategoryNode
  color: ColourContent
  colour: ColourContent @deprecated(reason: "Use `color` instead")
  driveline: DrivelineContent
  engine: EngineContent
  features: [Component!]!
  options: [OptionContent!]!
  packages: [PackageContent!]!
  trim: SalesLevelContent

  """Contains all tyre energy efficiency labels for this car"""
  tyreLabels: [TyreLabel!]
  upholstery: UpholsteryContent
  wheels: [WheelContent!]!
}

"""Represents a car"""
scalar CarKey

"""Expanded carKey"""
type CarKeyExpanded {
  body: String!
  carType: String!
  color: String
  engine: String!
  gearbox: String!
  marketingCode: String!
  modelYear: Int!
  options: [String!]
  packages: [String!]
  pno3: String! @deprecated(reason: "Use carType instead of pno3.")
  sMessage: String
  salesVersion: String!
  specMarket: String!
  steering: String!
  structureWeek: Int!
  upholstery: String
}

input CarKeyInput {
  body: String!
  carType: String
  color: String
  engine: String!
  gearbox: String!
  marketingCode: String!
  modelYear: Float!
  options: [String!]
  packages: [String!]
  pno3: String
  sMessage: String
  salesVersion: String!
  specMarket: String!
  steering: String!
  structureWeek: Float!
  upholstery: String
}

type CarList {
  cars: [Car!]!
  first: Car
  sortedOnPrice(priceConfigInput: PriceConfigurationInput, sortMissingPriceAs: NullSortingStrategy!): CarList!
  groupBy(
    filter: String
    groupType: CarListGroupingType

    """Deprecated, use 'groupType' instead"""
    type: String
  ): [GroupedCarList!]!
}

enum CarListGroupingType {
  BODY
  CAR_TYPE
  COLOR
  COMMERCIAL_MODEL_YEAR
  CUSTOMER_TYPE
  DRIVE_TRAIN
  DRIVE_TYPE
  EDITION
  ENGINE
  ENGINE_TYPE
  FUEL_TYPE
  GEARBOX
  MARKETING_CODE
  MODEL
  MODEL_CATEGORY
  MODEL_FAMILY
  MODEL_YEAR
  NUMBER_OF_SEATS
  PNO3
  PRODUCT_LINE
  SALES_MODEL
  SALES_VERSION
  SPEC_MARKET
  STEERING
  STRUCTURE_WEEK
  S_MESSAGE
  THEME
  TRANSMISSION_TYPE
  TRIM
  TRIM_FAMILY
  UPHOLSTERY
}

type CarMileagePrice {
  active: Boolean!
  default: Boolean!

  """
  maximum allowed driving distance for subscription. * Expressed in Kilometers (Km) or Miles depending on the market
  """
  mileage: PriceMileageUnit

  """
  maximum allowed driving distance for subscription per month. * Expressed in Kilometers (Km) or Miles depending on the market
  """
  mileagePerMonth: PriceMileageUnit
  price: PriceAmount

  """Price relative the default mileage"""
  relativeDefaultPrice: PriceAmount

  """Price relative the currently selected mileage"""
  relativePrice: PriceAmount
}

"""Price breakdown for a given car by component types."""
type CarPriceBreakdown {
  car: CarPriceBreakdownSummary
  color: ComponentPriceSummary
  options: [ComponentPriceSummary!]
  packages: [ComponentPriceSummary!]
  upholstery: ComponentPriceSummary
}

type CarPriceBreakdownSummary {
  afterCheckout: PriceAmount
  afterCheckoutVatAmount: PriceAmount
  afterCheckoutWithoutTax: PriceAmount
  atCheckout: PriceAmount
  atCheckoutVatAmount: PriceAmount
  atCheckoutWithoutTax: PriceAmount
}

type CarPriceFields {
  """Msrp amount of the car"""
  msrpPriceExclTax: PriceAmount

  """Msrp with VAT amount of the car"""
  msrpPriceExclTaxInclVat: PriceAmount

  """Msrp with taxes amount of the car"""
  msrpPriceInclTax: PriceAmount
  msrpRelativeGroupPriceExclTax: PriceAmount
  msrpRelativeGroupPriceExclTaxInclVat: PriceAmount
  msrpRelativeGroupPriceInclTax: PriceAmount

  """
  Group relative price the car. That is the relative price in relation to other cars in the same group. Null if group is unspecified.
  """
  relativeGroup: PriceAmount
  standardTransactionDiscountAmountInclTax: PriceAmount
  standardTransactionDiscountAmountInclTaxExclVat: PriceAmount
  standardTransactionDiscountRate: Float
  standardTransactionDiscountedPriceInclTax: PriceAmount
  standardTransactionDiscountedPriceInclTaxExclVat: PriceAmount
  standardTransactionDueTodayInclTax: PriceAmount
  standardTransactionDueTodayInclTaxExclVat: PriceAmount
  standardTransactionDueTodayVatAmount: PriceAmount
  standardTransactionPreDiscountPriceInclTax: PriceAmount
  standardTransactionPreDiscountPriceInclTaxExclVat: PriceAmount

  """Standard transaction price after checkout incVat"""
  standardTransactionPriceInclTax: PriceAmount

  """Standard transaction price after checkout exclVat"""
  standardTransactionPriceInclTaxExclVat: PriceAmount
  standardTransactionRelativeGroupPriceInclTax: PriceAmount
  standardTransactionRelativeGroupPriceInclTaxExclVat: PriceAmount
  subscriptionDiscountAmountInclTax: PriceAmount
  subscriptionDiscountAmountInclTaxExclVat: PriceAmount
  subscriptionDiscountRate: Float
  subscriptionDiscountedPriceInclTax: PriceAmount
  subscriptionDiscountedPriceInclTaxExclVat: PriceAmount
  subscriptionDueTodayInclTax: PriceAmount
  subscriptionDueTodayInclTaxExclVat: PriceAmount
  subscriptionDueTodayVatAmount: PriceAmount
  subscriptionPreDiscountPriceInclTax: PriceAmount
  subscriptionPreDiscountPriceInclTaxExclVat: PriceAmount

  """Subscription recurring price after checkout incVat"""
  subscriptionPriceInclTax: PriceAmount

  """Subscription recurring price after checkout exclVat"""
  subscriptionPriceInclTaxExclVat: PriceAmount
  subscriptionRelativeGroupPriceInclTax: PriceAmount
  subscriptionRelativeGroupPriceInclTaxExclVat: PriceAmount

  """Subscription recurring vat amount after checkout"""
  subscriptionVatAmount: PriceAmount
}

type CarPriceSummary {
  """All prices of the car"""
  all: CarPriceFields

  """
  Price breakdown of the car, to get the pricing for the individual components of it.
  """
  breakDown: CarPriceBreakdown

  """Due today amount"""
  dueToday: PriceAmount

  """Due today amount without vat, nil if same as dueToday"""
  dueTodayWithoutVat: PriceAmount

  """Non car products of the car."""
  nonCarProducts: [TransactionPriceTax!]

  """Price of the car"""
  price: PriceAmount

  """Price of the car without tax, nil if same as price"""
  priceWithoutTax: PriceAmount
  salesModelMetadata: CarSalesModelMetadata

  """The subscription alternatives available"""
  subscriptionPrices: [CarSubscriptionPrice!]

  """All taxes that applies to the car."""
  taxes: CarPriceTaxes

  """Total price of the car"""
  totalPrice: PriceAmount

  """Total price of the car without tax, nil if same as total price"""
  totalPriceWithoutTax: PriceAmount

  """Transaction base taxes"""
  transactionBaseTaxes: [TransactionPriceTax!]
}

type CarPriceTax {
  frequency: String
  name: String
  price: PriceAmount
  tags: [String!]
  taxId: Float
  taxType: String
  taxVersionId: Float
  vatPosition: String
  vatRate: Float
}

type CarPriceTaxes {
  acquisition: [CarPriceTax!]
  all: [CarPriceTax!]
  informational: [CarPriceTax!]
  ownership: [CarPriceTax!]
}

type CarPriceVisibility {
  carPriced: Boolean!
  componentPriced: Boolean!
  visible: Boolean!
}

type CarSalesModelMetadata {
  description: String

  """The localized full description of the sales model."""
  fullDescription: String
  name: String
  offers: [CarSalesModelMetadataOffer!]
}

type CarSalesModelMetadataOffer {
  """The localized short description of the offer."""
  description: String

  """The localized full description of the offer."""
  fullDescription: String

  """
  The identifier of the offer. Example: "Insurance"
  """
  id: String

  """The image url of the offer."""
  image: String

  """The localized name of the offer."""
  name: String
}

type CarSubscriptionPrice {
  active: Boolean!

  """
  Length for the subscription period. Expressed in Months.* (Installments per year is 12 as default)
  """
  contractLength: Float
  default: Boolean!

  """The driving mileages available given the contract length"""
  mileages: [CarMileagePrice!]
  price: PriceAmount

  """Relative price for the contract length"""
  relativePrice: PriceAmount
}

type CarType {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarTypeContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

enum CarTypeCategory {
  CROSSOVER
  ESTATE
  SEDAN
  SUV
}

"""Car Category Property"""
type CarTypeCategoryProperty {
  enumDescription: String
  formatted: String
  label: String
  value: CarTypeCategory
  valueDescription: String
}

type CarTypeContent {
  approachAngle: DecimalProperty
  bodyWidthInches: DecimalProperty
  bodyWidthMillimeters: DecimalProperty
  breakOverAngle: DecimalProperty
  carTypeCategory: CarTypeCategoryProperty
  cargoCapacityFrontCubicFeet: DecimalProperty
  cargoCapacityFrontLiters: DecimalProperty
  cargoCapacityMaxCubicFeet: DecimalProperty
  cargoCapacityMaxLiters: DecimalProperty
  cargoCapacityWithRepairKitCubicFeet: DecimalProperty
  cargoCapacityWithRepairKitLiters: DecimalProperty
  cargoCapacityWithSpareWheelCubicFeet: DecimalProperty
  cargoCapacityWithSpareWheelLiters: DecimalProperty
  coefficientOfDrag: DecimalProperty
  depatureAngle: DecimalProperty
  description: StringProperty
  displayName: StringProperty
  dragArea: DecimalProperty
  entityType: UpstreamEntityTypeProperty
  frontOverhangInches: DecimalProperty
  frontOverhangMillimeters: DecimalProperty
  frontTrackWidthInches: DecimalProperty
  frontTrackWidthMillimeters: DecimalProperty
  frontalAreaFeetSquare: DecimalProperty
  frontalAreaMeterSquare: DecimalProperty
  fuelCapacityImperialGallons: DecimalProperty
  fuelCapacityLiters: DecimalProperty
  fuelCapacityUsGallons: DecimalProperty
  groundClearanceAtCurbWeightInches: DecimalProperty
  groundClearanceAtCurbWeightMillimeters: DecimalProperty
  groundClearanceAtCurbWeightWithOnePersonInches: DecimalProperty
  groundClearanceAtCurbWeightWithOnePersonMillimeters: DecimalProperty
  headRoomFrontInches: DecimalProperty
  headRoomFrontMillimeters: DecimalProperty
  headRoomRearInches: DecimalProperty
  headRoomRearMillimeters: DecimalProperty
  hipRoomFrontInches: DecimalProperty
  hipRoomFrontMillimeters: DecimalProperty
  hipRoomRearInches: DecimalProperty
  hipRoomRearMillimeters: DecimalProperty
  image: ImageProperty
  kneeClearanceRearInches: DecimalProperty
  kneeClearanceRearMillimeters: DecimalProperty
  legRoomFrontInches: DecimalProperty
  legRoomFrontMillimeters: DecimalProperty
  legRoomRearInches: DecimalProperty
  legRoomRearMillimeters: DecimalProperty
  maxHeadRoomFrontInches: DecimalProperty
  maxHeadRoomFrontMillimeters: DecimalProperty
  maxHeadRoomRearInches: DecimalProperty
  maxHeadRoomRearMillimeters: DecimalProperty
  meta: SystemMeta
  modelCode: String!
  rearOverhangInches: DecimalProperty
  rearOverhangMeters: DecimalProperty
  seatCapacity: IntProperty
  shortDescription: StringProperty
  shortName: StringProperty
  shoulderRoomFrontInches: DecimalProperty
  shoulderRoomFrontMillimeters: DecimalProperty
  shoulderRoomRearInches: DecimalProperty
  shoulderRoomRearMillimeters: DecimalProperty
  steeringRatio: DecimalProperty
  turningCircleCurbToCurbInches: DecimalProperty
  turningCircleCurbToCurbMillimeters: DecimalProperty
  turningCircleWallToWallInches: DecimalProperty
  turningCircleWallToWallMillimeters: DecimalProperty
  turnsOfSteeringWheelEndToEnd: DecimalProperty
  vehicleHeightAtCurbWeightInches: DecimalProperty
  vehicleHeightAtCurbWeightMillimeters: DecimalProperty
  vehicleHeightAtCurbWeightWithOnePersonInches: DecimalProperty
  vehicleHeightAtCurbWeightWithOnePersonMillimeters: DecimalProperty
  vehicleHeightAtCurbWeightWithOpenTrunkInches: DecimalProperty
  vehicleHeightAtCurbWeightWithOpenTrunkMillimeters: DecimalProperty
  vehicleLengthInches: DecimalProperty
  vehicleLengthMillimeters: DecimalProperty
  vehicleWidthInches: DecimalProperty
  vehicleWidthMillimeters: DecimalProperty
  vehicleWidthMirrorsFoldedInches: DecimalProperty
  vehicleWidthMirrorsFoldedMillimeters: DecimalProperty
  vehicleWidthMirrorsIncludedInches: DecimalProperty
  vehicleWidthMirrorsIncludedMillimeters: DecimalProperty
  video: VideoProperty
  wadingCapabilityDepthInches: DecimalProperty
  wadingCapabilityDepthMillimeters: DecimalProperty
  wheelBaseInches: DecimalProperty
  wheelBaseMillimeters: DecimalProperty
}

"""Unapplied Car Type exceptions"""
type CarTypeException {
  content: EnrichedCarTypeContent!
  rule: ExceptionRule!
}

"""Container for car visibility fields"""
type CarVisibility {
  """
  The "baseCarKey" field contains a car key which describes a current configuration in the case when the carKey describes a previous / future carKey
  """
  baseCarKey: CarKey!
  carKey: CarKey!
  price(priceConfigurationInput: PriceConfigurationInput): CarPriceVisibility!
}

type CasApiCacheFlushResult {
  count: Int!
  pattern: String!
}

"""To select which CAS endpoint cache needs to be purged."""
enum CasEndPoints {
  all
  fyon
  specification
  vin
}

"""The different feature types according to CAS"""
enum CASFeatureType {
  ASHTRAY_LID
  BACKGROUND
  BODY
  BODYKIT
  BUMPER
  CARPET_KIT
  CEILING
  CEILING_MIRROR
  CENTER_TUNNEL_CONSOLE
  COLOR
  COMBI_INSTRUMENT
  CONNECTIVITY_PANEL
  COUNTRY_CODE
  DASHBOARD
  DECOR
  DECOR_SIDE_WINDOW
  DRIVELINE
  DRIVE_MODE
  ENGINE
  ENGINE_EMBLEM
  ENGINE_TYPE
  EXHAUST
  EXTERIOR_OPTIONS
  EXTERIOR_STYLING_OPTIONS
  FILTER_MODEL_YEAR
  FOGLIGHT
  FORCE_SALES_VERSION_IN_URL
  FOREGROUND
  FRONT_MUD_FLAP
  FRONT_STORAGE
  FUEL_PORT_CHARGING_PORT
  FUEL_TYPE
  GCC_OPTIONS
  GEARBOX
  GEARLEVER
  GRILLE
  HANDLES
  HEADLIGHTS
  HEADLIGHT_CLEANER
  HEADLINING
  HEATED_STEERINGWHEEL
  INTERIOR_ILLUMINATION
  INTERIOR_STYLING_OPTIONS
  MARKET_CODE
  MIRROR
  MISC
  MODEL
  MODEL_YEAR
  OPTIONS
  PACKAGES
  PADDLE
  PNO12
  PNO34
  POLESTAR_ENGINEERED
  POWERSOCKET
  POWER_MEMORY_SEAT
  POWER_MEMORY_SEAT_EXTENDED
  PRE_CONFIGURED
  RAILS
  REAR_MUD_FLAP
  RIMS
  ROOF
  RUNNINGBOARD
  SALES_VERSION
  SEAT_ADJUSTMENT
  SEAT_COUNT
  SEAT_CUSHION_EXTENSION
  SEAT_LUMBAR_SUPPORT
  SENSORS
  SKIDPLATE
  SKIDPLATE_ACCESSORY
  SOUNDSYSTEM
  SPOILER
  STANDARD_FEATURES
  STARTING_POINT
  STEERINGWHEEL
  STEERING_TYPE
  STRUCTURE_WEEK
  STYLE_CONFIGURATIONS
  SUNROOF
  TOTAL_AND_DEFAULTS
  TOWBAR
  TRANSMISSION
  TRIMLEVEL
  UNKNOWN
  UPHOLSTERY
  VERSION
  WASTEBIN
  WHEEL_ARCHES
  WINDOWS
}

type CATEGORIZATION {
  """Category key name"""
  key: String

  """Category display name"""
  name: String

  """Slug if defined"""
  slug: String

  """Sort order if defined"""
  sort: Int

  """Media url"""
  media: CATEGORIZATION_MEDIA
}

enum CATEGORIZATION_MEDIA {
  exterior
  interior
  none
}

input CchPriceConfigurationInput {
  name: String = "default"
  priceDates: [TaxationInput!]
  roundingStrategy: RoundingStrategy = alwaysRound
  taxation: [TaxationInput!]
  variableReferences: [VariableReference!] = []
}

enum CHANNEL {
  CBV
}

enum Classification {
  CHARGING
  CLIMATE
  DRIVERS_SUPPORT
  EXTERIOR
  INSURANCE
  INTERIOR
  PACK_LOAD
  SAFETY_SECURITY
  SEATS
  SERVICE_WARRANTY
  TECH_SOUND
  WHEELS
  WINTER_WHEELS
}

type CLASSIFICATION {
  """Classification key name"""
  key: String

  """Classification display name"""
  name: String

  """Slug if defined"""
  slug: String

  """Sort order if defined"""
  sort: Int
}

"""Classification"""
type ClassificationProperty {
  enumDescription: String
  formatted: String
  label: String
  value: Classification
  valueDescription: String
}

"""Classifications"""
type Classifications {
  charging: ClassificationProperty!
  climate: ClassificationProperty!
  driversSupport: ClassificationProperty!
  exterior: ClassificationProperty!
  insurance: ClassificationProperty!
  interiorClass: ClassificationProperty!
  packLoad: ClassificationProperty!
  safetySecurity: ClassificationProperty!
  seats: ClassificationProperty!
  serviceWarranty: ClassificationProperty!
  techSound: ClassificationProperty!
  wheels: ClassificationProperty!
  winterWheels: ClassificationProperty!
}

enum CLE_CAR_TYPE {
  stockCars
  subscriptionCars
  onlineCars
}

input CLEBoolFilter {
  not: Boolean
  value: [CLEBoolValue!]
}

input CLEBoolValue {
  exists: Boolean
  not: Boolean
  value: Boolean
}

input CLEBoostBoolFilter {
  boostScore: Float
  value: CLEBoostBoolValue
}

input CLEBoostBoolValue {
  exists: Boolean
  not: Boolean
  value: Boolean
}

input CLEBoostDateFilter {
  boostScore: Float
  value: CLEBoostDateValue
}

input CLEBoostDateRangeValue {
  exactValue: DateTime
  max: DateTime
  min: DateTime
}

input CLEBoostDateValue {
  exists: Boolean
  not: Boolean
  value: CLEBoostDateRangeValue
}

input CLEBoostNumberRangeFilter {
  boostScore: Float
  value: CLEBoostNumberRangeValue
}

input CLEBoostNumberRangeValue {
  exactValue: Float
  max: Float
  min: Float
}

input CLEBoostStringFilter {
  boostScore: Float
  value: CLEBoostStringValue
}

input CLEBoostStringValue {
  exists: Boolean
  not: Boolean
  value: String
}

input CLEBoostValue {
  accessories: [CLEBoostStringFilter!]
  available: [CLEBoostBoolFilter!]
  bodyCode: [CLEBoostStringFilter!]
  colorCode: [CLEBoostStringFilter!]
  colorHex: CLEBoostStringFilter
  commonOrderNumber: [CLEBoostStringFilter!]
  commonOrderType: CLEBoostNumberRangeFilter
  commonSalesType: [CLEBoostStringFilter!]
  dealerId: [CLEBoostStringFilter!]
  demoCar: [CLEBoostBoolFilter!]
  driveLine: [CLEBoostStringFilter!]
  driveTypeCode: [CLEBoostStringFilter!]
  duplicatesIdentifier: [CLEBoostStringFilter!]
  energyEfficiencyClass: [CLEBoostStringFilter!]
  engineCode: [CLEBoostStringFilter!]
  engineType: [CLEBoostStringFilter!]
  exteriorTheme: CLEBoostStringFilter
  features: [CLEBoostStringFilter!]
  fleetManagementAvailable: [CLEBoostBoolFilter!]
  fuelType: [CLEBoostStringFilter!]
  gearboxCode: [CLEBoostStringFilter!]
  gearboxType: [CLEBoostStringFilter!]
  marketCode: [CLEBoostStringFilter!]
  marketingCode: [CLEBoostStringFilter!]
  minimumGrossSubscriptionPriceB2C: [CLEBoostNumberRangeFilter!]
  minimumNetSubscriptionPriceB2B: [CLEBoostNumberRangeFilter!]
  modelCategory: [CLEBoostStringFilter!]
  modelCode: [CLEBoostStringFilter!]
  modelFamily: [CLEBoostStringFilter!]
  modelYear: [CLEBoostStringFilter!]
  msrpPrice: [CLEBoostNumberRangeFilter!]
  numberOfSeats: [CLEBoostNumberRangeFilter!]
  numberOfSeatsCode: [CLEBoostStringFilter!]
  options: [CLEBoostStringFilter!]
  orderAvailableForUnconsentedTrade: [CLEBoostBoolFilter!]
  orderBrandStatusPoint: [CLEBoostNumberRangeFilter!]
  orderCommonStatusPoint: [CLEBoostNumberRangeFilter!]
  orderCustomerReferenceNumber: [CLEBoostStringFilter!]
  orderDealerOrderNumber: [CLEBoostStringFilter!]
  orderDeliveryDate: [CLEBoostDateFilter!]
  orderDestinationCode: [CLEBoostStringFilter!]
  orderDistributorId: [CLEBoostStringFilter!]
  orderFactoryCompleteDate: [CLEBoostDateFilter!]
  orderFyon: [CLEBoostStringFilter!]
  orderIntermediateDestination: [CLEBoostStringFilter!]
  orderLastDateForSpecChange: [CLEBoostDateFilter!]
  orderPendingTransfer: [CLEBoostBoolFilter!]
  orderPreliminaryReservationDealerId: [CLEBoostStringFilter!]
  orderVisibilityIndicator: [CLEBoostBoolFilter!]
  packages: [CLEBoostStringFilter!]
  pno12: [CLEBoostStringFilter!]
  pno34PlusOptions: [CLEBoostStringFilter!]
  preTaxAmount: [CLEBoostNumberRangeFilter!]
  reservationReservedThrough: [CLEBoostStringFilter!]
  salesVersionCode: CLEBoostStringFilter
  salesVersionName: [CLEBoostStringFilter!]
  specialMessageCode: [CLEBoostStringFilter!]
  steeringCode: [CLEBoostStringFilter!]
  structureWeek: [CLEBoostStringFilter!]
  trimLevelCode: [CLEBoostStringFilter!]
  upholsteryCode: [CLEBoostStringFilter!]
  vin: [CLEBoostStringFilter!]
  visible: [CLEBoostBoolFilter!]
  wheelsCode: CLEBoostStringFilter
}

input CLEBoostValueWithDistributionChannel {
  accessories: [CLEBoostStringFilter!]
  available: [CLEBoostBoolFilter!]
  bodyCode: [CLEBoostStringFilter!]
  colorCode: [CLEBoostStringFilter!]
  colorHex: CLEBoostStringFilter
  commonOrderNumber: [CLEBoostStringFilter!]
  commonOrderType: CLEBoostNumberRangeFilter
  commonSalesType: [CLEBoostStringFilter!]
  dealerId: [CLEBoostStringFilter!]
  demoCar: [CLEBoostBoolFilter!]
  distributionChannelType: [CLEBoostStringFilter!]
  driveLine: [CLEBoostStringFilter!]
  driveTypeCode: [CLEBoostStringFilter!]
  duplicatesIdentifier: [CLEBoostStringFilter!]
  energyEfficiencyClass: [CLEBoostStringFilter!]
  engineCode: [CLEBoostStringFilter!]
  engineType: [CLEBoostStringFilter!]
  exteriorTheme: CLEBoostStringFilter
  features: [CLEBoostStringFilter!]
  fleetManagementAvailable: [CLEBoostBoolFilter!]
  fuelType: [CLEBoostStringFilter!]
  gearboxCode: [CLEBoostStringFilter!]
  gearboxType: [CLEBoostStringFilter!]
  marketCode: [CLEBoostStringFilter!]
  marketingCode: [CLEBoostStringFilter!]
  minimumGrossSubscriptionPriceB2C: [CLEBoostNumberRangeFilter!]
  minimumNetSubscriptionPriceB2B: [CLEBoostNumberRangeFilter!]
  modelCategory: [CLEBoostStringFilter!]
  modelCode: [CLEBoostStringFilter!]
  modelFamily: [CLEBoostStringFilter!]
  modelYear: [CLEBoostStringFilter!]
  msrpPrice: [CLEBoostNumberRangeFilter!]
  numberOfSeats: [CLEBoostNumberRangeFilter!]
  numberOfSeatsCode: [CLEBoostStringFilter!]
  options: [CLEBoostStringFilter!]
  orderAvailableForUnconsentedTrade: [CLEBoostBoolFilter!]
  orderBrandStatusPoint: [CLEBoostNumberRangeFilter!]
  orderCommonStatusPoint: [CLEBoostNumberRangeFilter!]
  orderCustomerReferenceNumber: [CLEBoostStringFilter!]
  orderDealerOrderNumber: [CLEBoostStringFilter!]
  orderDeliveryDate: [CLEBoostDateFilter!]
  orderDestinationCode: [CLEBoostStringFilter!]
  orderDistributorId: [CLEBoostStringFilter!]
  orderFactoryCompleteDate: [CLEBoostDateFilter!]
  orderFyon: [CLEBoostStringFilter!]
  orderIntermediateDestination: [CLEBoostStringFilter!]
  orderLastDateForSpecChange: [CLEBoostDateFilter!]
  orderPendingTransfer: [CLEBoostBoolFilter!]
  orderPreliminaryReservationDealerId: [CLEBoostStringFilter!]
  orderVisibilityIndicator: [CLEBoostBoolFilter!]
  packages: [CLEBoostStringFilter!]
  pno12: [CLEBoostStringFilter!]
  pno34PlusOptions: [CLEBoostStringFilter!]
  preTaxAmount: [CLEBoostNumberRangeFilter!]
  reservationReservedThrough: [CLEBoostStringFilter!]
  salesVersionCode: CLEBoostStringFilter
  salesVersionName: [CLEBoostStringFilter!]
  specialMessageCode: [CLEBoostStringFilter!]
  steeringCode: [CLEBoostStringFilter!]
  structureWeek: [CLEBoostStringFilter!]
  trimLevelCode: [CLEBoostStringFilter!]
  upholsteryCode: [CLEBoostStringFilter!]
  vin: [CLEBoostStringFilter!]
  visible: [CLEBoostBoolFilter!]
  wheelsCode: CLEBoostStringFilter
}

input CLECarFilter {
  not: Boolean
  value: CLECarFilterValue
}

input CLECarFilterValue {
  accessories: CLEStringCollectionFilter
  available: CLEBoolFilter
  bodyCode: CLEStringFilter
  bodyStyle: CLEStringFilter
  colorCode: CLEStringFilter
  colorHex: CLEStringFilter
  commonOrderNumber: CLEStringFilter
  commonOrderType: CLENumberRangeFilter
  commonSalesType: CLEStringFilter
  dealerId: CLEStringFilter
  demoCar: CLEBoolFilter
  driveLine: CLEStringFilter
  driveTypeCode: CLEStringFilter
  duplicatesIdentifier: CLEStringFilter
  energyEfficiencyClass: CLEStringFilter
  engineCode: CLEStringFilter
  engineType: CLEStringFilter
  exteriorTheme: CLEStringFilter
  features: CLEStringCollectionFilter
  fleetManagementAvailable: CLEBoolFilter
  fuelType: CLEStringFilter
  gearboxCode: CLEStringFilter
  gearboxType: CLEStringFilter
  id: CLEStringFilter
  marketCode: CLEStringFilter
  marketingCode: CLEStringFilter
  minimumGrossSubscriptionPriceB2C: CLENumberRangeFilter
  minimumNetSubscriptionPriceB2B: CLENumberRangeFilter
  modelCategory: CLEStringFilter
  modelCode: CLEStringFilter
  modelFamily: CLEStringFilter
  modelYear: CLEStringFilter
  msrpPrice: CLENumberRangeFilter
  nedcCombinedCo2: CLENumberRangeFilter
  nedcElectricRange: CLENumberRangeFilter
  nedcEnergyConsumption: CLENumberRangeFilter
  nedcExurbanFuelConsumption: CLENumberRangeFilter
  nedcFuelConsumption: CLENumberRangeFilter
  nedcIsOfficial: CLEBoolFilter
  nedcUrbanFuelConsumption: CLENumberRangeFilter
  nedcWeightedCombinedCo2: CLENumberRangeFilter
  nedcWeightedCombinedFuelConsumption: CLENumberRangeFilter
  numberOfSeats: CLENumberRangeFilter
  numberOfSeatsCode: CLEStringFilter
  options: CLEStringCollectionFilter
  orderAvailableForUnconsentedTrade: CLEBoolFilter
  orderBrandStatusPoint: CLENumberRangeFilter
  orderCommonStatusPoint: CLENumberRangeFilter
  orderCustomerReferenceNumber: CLEStringFilter
  orderDealerOrderNumber: CLEStringFilter
  orderDeliveryDate: CLEDateFilter
  orderDestinationCode: CLEStringFilter
  orderDistributorId: CLEStringFilter
  orderFactoryCompleteDate: CLEDateFilter
  orderFyon: CLEStringFilter
  orderIntermediateDestination: CLEStringFilter
  orderLastDateForSpecChange: CLEDateFilter
  orderPendingTransfer: CLEBoolFilter
  orderPreliminaryReservationDealerId: CLEStringFilter
  orderVisibilityIndicator: CLEBoolFilter
  packages: CLEStringCollectionFilter
  pno12: CLEStringFilter
  pno34PlusOptions: CLEStringFilter
  preTaxAmount: CLENumberRangeFilter
  reservationReservedThrough: CLEStringFilter
  salesVersionCode: CLEStringFilter
  salesVersionName: CLEStringFilter
  specialMessageCode: CLEStringFilter
  steeringCode: CLEStringFilter
  structureWeek: CLEStringFilter
  trimLevelCode: CLEStringFilter
  upholsteryCode: CLEStringFilter
  vin: CLEStringFilter
  visible: CLEBoolFilter
  weightActualMass: CLENumberRangeFilter
  weightMassInRunningOrderTotal: CLENumberRangeFilter
  weightTestMassIndividual: CLENumberRangeFilter
  wheelsCode: CLEStringFilter
  wltpCombinedCo2: CLENumberRangeFilter
  wltpElectricEnergyConsumption: CLENumberRangeFilter
  wltpElectricRange: CLENumberRangeFilter
  wltpExtraHighFuelConsumption: CLENumberRangeFilter
  wltpFuelConsumption: CLENumberRangeFilter
  wltpHighFuelConsumption: CLENumberRangeFilter
  wltpIsOfficial: CLEBoolFilter
  wltpLowFuelConsumption: CLENumberRangeFilter
  wltpMediumFuelConsumption: CLENumberRangeFilter
  wltpWeightedCombinedCo2: CLENumberRangeFilter
  wltpWeightedCombinedFuelConsumption: CLENumberRangeFilter
}

input CLECarFilterWithDistributionChannel {
  not: Boolean
  value: CLECarFilterWithDistributionChannelValue
}

input CLECarFilterWithDistributionChannelValue {
  accessories: CLEStringCollectionFilter
  available: CLEBoolFilter
  bodyCode: CLEStringFilter
  bodyStyle: CLEStringFilter
  colorCode: CLEStringFilter
  colorHex: CLEStringFilter
  commonOrderNumber: CLEStringFilter
  commonOrderType: CLENumberRangeFilter
  commonSalesType: CLEStringFilter
  dealerId: CLEStringFilter
  demoCar: CLEBoolFilter
  distributionChannelType: CLEStringFilter
  driveLine: CLEStringFilter
  driveTypeCode: CLEStringFilter
  duplicatesIdentifier: CLEStringFilter
  energyEfficiencyClass: CLEStringFilter
  engineCode: CLEStringFilter
  engineType: CLEStringFilter
  exteriorTheme: CLEStringFilter
  features: CLEStringCollectionFilter
  fleetManagementAvailable: CLEBoolFilter
  fuelType: CLEStringFilter
  gearboxCode: CLEStringFilter
  gearboxType: CLEStringFilter
  id: CLEStringFilter
  marketCode: CLEStringFilter
  marketingCode: CLEStringFilter
  minimumGrossSubscriptionPriceB2C: CLENumberRangeFilter
  minimumNetSubscriptionPriceB2B: CLENumberRangeFilter
  modelCategory: CLEStringFilter
  modelCode: CLEStringFilter
  modelFamily: CLEStringFilter
  modelYear: CLEStringFilter
  msrpPrice: CLENumberRangeFilter
  nedcCombinedCo2: CLENumberRangeFilter
  nedcElectricRange: CLENumberRangeFilter
  nedcEnergyConsumption: CLENumberRangeFilter
  nedcExurbanFuelConsumption: CLENumberRangeFilter
  nedcFuelConsumption: CLENumberRangeFilter
  nedcIsOfficial: CLEBoolFilter
  nedcUrbanFuelConsumption: CLENumberRangeFilter
  nedcWeightedCombinedCo2: CLENumberRangeFilter
  nedcWeightedCombinedFuelConsumption: CLENumberRangeFilter
  numberOfSeats: CLENumberRangeFilter
  numberOfSeatsCode: CLEStringFilter
  options: CLEStringCollectionFilter
  orderAvailableForUnconsentedTrade: CLEBoolFilter
  orderBrandStatusPoint: CLENumberRangeFilter
  orderCommonStatusPoint: CLENumberRangeFilter
  orderCustomerReferenceNumber: CLEStringFilter
  orderDealerOrderNumber: CLEStringFilter
  orderDeliveryDate: CLEDateFilter
  orderDestinationCode: CLEStringFilter
  orderDistributorId: CLEStringFilter
  orderFactoryCompleteDate: CLEDateFilter
  orderFyon: CLEStringFilter
  orderIntermediateDestination: CLEStringFilter
  orderLastDateForSpecChange: CLEDateFilter
  orderPendingTransfer: CLEBoolFilter
  orderPreliminaryReservationDealerId: CLEStringFilter
  orderVisibilityIndicator: CLEBoolFilter
  packages: CLEStringCollectionFilter
  pno12: CLEStringFilter
  pno34PlusOptions: CLEStringFilter
  preTaxAmount: CLENumberRangeFilter
  reservationReservedThrough: CLEStringFilter
  salesVersionCode: CLEStringFilter
  salesVersionName: CLEStringFilter
  specialMessageCode: CLEStringFilter
  steeringCode: CLEStringFilter
  structureWeek: CLEStringFilter
  trimLevelCode: CLEStringFilter
  upholsteryCode: CLEStringFilter
  vin: CLEStringFilter
  visible: CLEBoolFilter
  weightActualMass: CLENumberRangeFilter
  weightMassInRunningOrderTotal: CLENumberRangeFilter
  weightTestMassIndividual: CLENumberRangeFilter
  wheelsCode: CLEStringFilter
  wltpCombinedCo2: CLENumberRangeFilter
  wltpElectricEnergyConsumption: CLENumberRangeFilter
  wltpElectricRange: CLENumberRangeFilter
  wltpExtraHighFuelConsumption: CLENumberRangeFilter
  wltpFuelConsumption: CLENumberRangeFilter
  wltpHighFuelConsumption: CLENumberRangeFilter
  wltpIsOfficial: CLEBoolFilter
  wltpLowFuelConsumption: CLENumberRangeFilter
  wltpMediumFuelConsumption: CLENumberRangeFilter
  wltpWeightedCombinedCo2: CLENumberRangeFilter
  wltpWeightedCombinedFuelConsumption: CLENumberRangeFilter
}

input CLEDateFilter {
  not: Boolean
  value: [CLEDateValue!]
}

input CLEDateFilterValue {
  exactValue: DateTime
  max: DateTime
  min: DateTime
}

input CLEDateValue {
  exists: Boolean
  not: Boolean
  value: CLEDateFilterValue
}

type CLEEngine {
  code: String
  description: [Description!]
  engineType: String
  fuelType: String
  groupCode: String
  groupDescription: [Description!]
}

type CLEEnvironmentalData {
  energyEfficiencyClass: String
  nedc: Nedc
  weight: Weight
  wltp: Wltp
}

type CLEGearbox {
  code: String
  description: [Description!]
  gearboxType: String
  groupCode: String
  groupDescription: [Description!]
}

input CLENumberFilterValue {
  exactValue: Float
  max: Float
  min: Float
}

input CLENumberRangeFilter {
  not: Boolean
  value: [CLENumberValue!]
}

input CLENumberValue {
  exists: Boolean
  not: Boolean
  value: CLENumberFilterValue
}

type CLEPno {
  pno12: String
  pno34PlusOptions: String
}

type CLEResponse {
  aggregations: [Aggregation!]
  hits: [StockVehicleHit!]!
  metadata: Metadata!
  ranges: [Range!]
}

type CLESalesVersion {
  code: String
  description: [Description!]
  groupCode: String
  groupDescription: [Description!]
  salesVersionCode: String
  salesVersionName: String
}

input CLESearchFilter {
  boost: CLEBoostValue
  excludeDuplicates: Boolean
  filter: CLECarFilter
  includeUnavailable: Boolean
  skip: Float
  sort: [CLESortValue!]
  take: Float
}

input CLESearchFilterWithDistributionChannel {
  boost: CLEBoostValueWithDistributionChannel
  excludeDuplicates: Boolean
  filter: CLECarFilterWithDistributionChannel
  includeUnavailable: Boolean
  languages: [String!]
  skip: Float
  sort: [CLESortValue!]
  take: Float
}

"""CLE sortable field names"""
enum CLESortFieldName {
  available
  demoCar
  energyEfficiencyClass
  minimumGrossSubscriptionPriceB2C
  minimumNetSubscriptionPriceB2B
  modelYear
  msrpPrice
  numberOfSeats
  orderBrandStatusPoint
  orderCommonStatusPoint
  orderDeliveryDate
  orderFactoryCompleteDate
  orderVisibilityIndicator
  preTaxAmount
  relevanceScore
  reservationReservedAt
  structureWeek
  visible
  weightActualMass
  wltpElectricRange
  wltpFuelConsumption
}

input CLESortValue {
  desc: Boolean
  field: CLESortFieldName
}

input CLEStringCollectionFilter {
  not: Boolean
  value: [CLEStringCollectionValue!]
}

input CLEStringCollectionValue {
  exists: Boolean
  not: Boolean
  value: CLEStringCollectionValues
}

input CLEStringCollectionValues {
  values: [CLEStringValue!]
}

input CLEStringFilter {
  not: Boolean
  value: [CLEStringValue!]
}

input CLEStringValue {
  exists: Boolean
  not: Boolean
  value: String
}

type CLEUpholstery {
  code: String
  description: [Description!]
  groupCode: String
  groupDescription: [Description!]
  hex: String
  packages: [String!]
}

type CLIENT_CONFIGURATION {
  energyEfficiencySettings: ENERGY_EFFICIENCY_SETTINGS!
  energyEfficiencyRange: String
  priceStrategy: PRICE_STRATEGY
  locale: String!
  defaultLocale: String!
  locales: [String!]
  policy: String!
  priceConfigInput: PRICE_CONFIGURATION
  priceConfigs: [CLIENT_PRICE_CONFIG!]
  salesModelSettings: [SALES_MODEL_SETTING]
}

enum CLIENT_CONFIGURATION_CHECKOUT_ENUM {
  privateLeasing
  default
  careByVolvo
}

input CLIENT_CONFIGURATION_INPUT {
  key: String
  value: String
}

type CLIENT_CONFIGURATION_QUERY {
  basePath: String!
  checkout: CLIENT_CONFIGURATION_CHECKOUT_ENUM
  documentTitle: String!
  configuration: CLIENT_CONFIGURATION
  componentBehavior: COMPONENT_BEHAVIOR!
  header: JSON
  footer: JSON
}

type CLIENT_PRICE_CONFIG {
  name: String
  priceConfigInput: PRICE_CONFIGURATION
}

type CMY {
  name: String
  structureWeekFrom: Int
}

type CO2 {
  wltp: [Co2Parameters!]
  nedcRrcx: [Co2Parameters!]
  efficiencyClass: String
}

type Co2Parameters {
  name: String
  description: String
  value: String
  unit: String
}

type COL {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: COL_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  hex: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): ColourContent
  globalName: String
  globalShortName: String
}

type COL_DISPLAY_TYPE {
  key: String
  name: String
}

type Color {
  code: String
  description: [Description!]
  groupCode: String
  groupDescription: [Description!]
  hex: String
  packages: [String!]
}

type Colour {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): ColourContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type ColourContent implements CarComponentContent {
  baseColor: BaseColourProperty
  baseColour: BaseColourProperty @deprecated(reason: "Use `baseColor` instead")
  colorCode: String!
  colorType: ColourTypeProperty
  colourCode: String! @deprecated(reason: "Use `colorCode` instead")
  colourType: ColourTypeProperty @deprecated(reason: "Use `colorType` instead")
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  hex: StringProperty
  image: ImageProperty
  meta: SystemMeta
  shortDescription: StringProperty
  swatchImage: ImageProperty
  video: VideoProperty
}

"""Unapplied Colour exceptions"""
type ColourException {
  content: EnrichedColourContent!
  rule: ExceptionRule!
}

enum ColourType {
  EXCLUSIVE
  MATTE
  METALLIC
  SOLID
}

"""Color Type Property"""
type ColourTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: ColourType
  valueDescription: String
}

"""Colour types"""
type ColourTypes {
  exclusive: ColourTypeProperty!
  matte: ColourTypeProperty!
  metallic: ColourTypeProperty!
  solid: ColourTypeProperty!
}

type COMMERCIAL_MODEL_YEAR {
  currentCommercialModelYear: CMY
  futureCommercialModelYears: [CMY!]
}

type CommercialModelYear {
  name: String!
  structureWeekFrom: Int!
}

type CompareTwoCarPrices {
  """Total price for the addons on the car"""
  addOns: PriceAmount
  basePrice: PriceAmount
  totalPrice: PriceAmount

  """
  The difference between the current total price of the car, minus the price of the base car, and the sum of component prices. 
  = totalPrice - (basePrice + addOns).
  """
  totalPriceMinusBasePriceWithAddons: PriceAmount
}

type Component {
  accessoryCodes: [String!]!
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  featureCodes: [String!]!
  image: ImageProperty
  matchingCode: String!
  meta: SystemMeta
  optionCodes: [String!]!
  shortDescription: StringProperty
  video: VideoProperty
}

type COMPONENT {
  name: String
  type: String
  image1: String
  image2: String
  visible: Boolean
  componentTypeId: String
  displayName: String
  description: String
  selections: [COMPONENT!]
  componentPrice: PRICE_DATA
  indirect: Boolean
  co2Effect: Boolean
  optionType: String
  tags: [String!]
  _state: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PrismGenericContent
}

enum COMPONENT_BEHAVIOR {
  showAll
  hideIncluded
  hideInPackage
}

type COMPONENT_DISPLAY_TYPE {
  """Holds the key string"""
  key: String

  """Holds the translated text for component type"""
  name: String
}

type COMPONENT_PRICE {
  """Name or code of the component"""
  name: String

  """Type of the component"""
  type: String

  """Price of the component"""
  price: Int
}

type ComponentContentException {
  displayName: StringProperty
  pno12s: [String!]!
}

type ComponentContentWithExceptions {
  categorization: String
  displayName: StringProperty
  entityType: String
  exceptions: [ComponentContentException!]!
  shortName: StringProperty
}

"""Unapplied Component exceptions"""
type ComponentException {
  content: EnrichedComponentContent!
  rule: ExceptionRule!
}

type ComponentPriceBreakdownSummary implements ComponentPriceSummary {
  all: ComponentPriceFields
  code: String!
  items: [ComponentPriceSummary!]
  price: PriceAmount
  type: String!
}

type ComponentPriceFields {
  discountPercentage: Float
  discountedListPriceMsrpExclTax: PriceAmount
  discountedListPriceMsrpExclTaxInclVat: PriceAmount
  listPriceMsrpExclTax: PriceAmount
  listPriceMsrpExclTaxInclVat: PriceAmount

  """Msrp amount of the car"""
  msrpPriceExclTax: PriceAmount

  """Msrp with VAT amount of the car"""
  msrpPriceExclTaxInclVat: PriceAmount

  """Msrp with taxes amount of the car"""
  msrpPriceInclTax: PriceAmount
  msrpRelativeGroupPriceExclTax: PriceAmount
  msrpRelativeGroupPriceExclTaxInclVat: PriceAmount
  msrpRelativeGroupPriceInclTax: PriceAmount
  priceBreakdownMsrpExclTax: PriceAmount
  priceBreakdownMsrpPriceExclTaxInclVat: PriceAmount
  priceBreakdownMsrpPriceInclTax: PriceAmount
  priceBreakdownStandardTransactionPriceInclTax: PriceAmount
  priceBreakdownStandardTransactionPriceInclTaxExclVat: PriceAmount
  priceBreakdownSubscriptionPriceInclTax: PriceAmount
  priceBreakdownSubscriptionPriceInclTaxExclVat: PriceAmount
  relativeBaseMsrpPriceExclTax: PriceAmount
  relativeBaseMsrpPriceExclTaxInclVat: PriceAmount
  relativeBaseMsrpPriceInclTax: PriceAmount
  relativeBaseMsrpSplitTax: PriceAmount

  """
  Group relative price the car. That is the relative price in relation to other cars in the same group. Null if group is unspecified.
  """
  relativeGroup: PriceAmount
  relativeMsrpPriceExclTax: PriceAmount
  relativeMsrpPriceExclTaxInclVat: PriceAmount
  relativeMsrpPriceInclTax: PriceAmount
  relativeMsrpPriceSplitTax: PriceAmount
  standardTransactionDiscountAmountInclTax: PriceAmount
  standardTransactionDiscountAmountInclTaxExclVat: PriceAmount
  standardTransactionDiscountRate: Float
  standardTransactionDiscountedPriceInclTax: PriceAmount
  standardTransactionDiscountedPriceInclTaxExclVat: PriceAmount
  standardTransactionDueTodayInclTax: PriceAmount
  standardTransactionDueTodayInclTaxExclVat: PriceAmount
  standardTransactionDueTodayVatAmount: PriceAmount
  standardTransactionPreDiscountPriceInclTax: PriceAmount
  standardTransactionPreDiscountPriceInclTaxExclVat: PriceAmount

  """Standard transaction price after checkout incVat"""
  standardTransactionPriceInclTax: PriceAmount

  """Standard transaction price after checkout exclVat"""
  standardTransactionPriceInclTaxExclVat: PriceAmount
  standardTransactionRelativeBasePriceInclTax: PriceAmount
  standardTransactionRelativeBasePriceInclTaxExclVat: PriceAmount
  standardTransactionRelativeGroupPriceInclTax: PriceAmount
  standardTransactionRelativeGroupPriceInclTaxExclVat: PriceAmount
  standardTransactionRelativePriceInclTax: PriceAmount
  standardTransactionRelativePriceInclTaxExclVat: PriceAmount
  subscriptionDiscountAmountInclTax: PriceAmount
  subscriptionDiscountAmountInclTaxExclVat: PriceAmount
  subscriptionDiscountRate: Float
  subscriptionDiscountedPriceInclTax: PriceAmount
  subscriptionDiscountedPriceInclTaxExclVat: PriceAmount
  subscriptionDueTodayInclTax: PriceAmount
  subscriptionDueTodayInclTaxExclVat: PriceAmount
  subscriptionDueTodayVatAmount: PriceAmount
  subscriptionListPrice: PriceAmount
  subscriptionListPriceExclVat: PriceAmount
  subscriptionPreDiscountPriceInclTax: PriceAmount
  subscriptionPreDiscountPriceInclTaxExclVat: PriceAmount

  """Subscription recurring price after checkout incVat"""
  subscriptionPriceInclTax: PriceAmount

  """Subscription recurring price after checkout exclVat"""
  subscriptionPriceInclTaxExclVat: PriceAmount
  subscriptionRelativeBasePriceInclTax: PriceAmount
  subscriptionRelativeBasePriceInclTaxExclVat: PriceAmount
  subscriptionRelativeGroupPriceInclTax: PriceAmount
  subscriptionRelativeGroupPriceInclTaxExclVat: PriceAmount
  subscriptionRelativePriceInclTax: PriceAmount
  subscriptionRelativePriceInclTaxExclVat: PriceAmount

  """Subscription recurring vat amount after checkout"""
  subscriptionVatAmount: PriceAmount
}

interface ComponentPriceSummary {
  all: ComponentPriceFields
  code: String!
  price: PriceAmount
  type: String!
}

type ComponentWithExceptions {
  carKeys: [CarKey!]!
  carTypes: [String!]!
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): ComponentContentWithExceptions
  featureType: Int!
  globalName: GlobalNameWithExceptions
  optionType: String
}

type CONDITION_FILTER {
  conditions: [CONDITION_FILTER_PARAMETER]
  settings: [SETTING]
}

input CONDITION_FILTER_IN_PARAMETER_IN {
  id: String
  type: String
}

type CONDITION_FILTER_PARAMETER {
  type: String
  displayName: String
  values: [CONDITION_FILTER_PARAMETER_COMPONENT!]
}

type CONDITION_FILTER_PARAMETER_COMPONENT {
  type: String
  id: String
  displayName: String
}

type CONFIG_COMPONENT {
  type: String!
  code: String!
  displayName: String

  """Display Type"""
  displayType: COMPONENT_DISPLAY_TYPE

  """Tags for the component"""
  tags: [String!]
  categorization: CATEGORIZATION
  classification: CLASSIFICATION
  _state: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PrismGenericContent
}

type Configuration {
  accessories: [DescribableFeature!]
  bodyStyle: DescribableFeature
  color: Color
  exteriorTheme: DescribableFeature
  features: [GroupableFeature!]
  hiddenFeatures: [GroupableFeature!]
  hiddenOptions: [PackageableFeature!]
  hiddenPackages: [GroupableFeature!]
  options: [PackageableFeature!]
  packages: [GroupableFeature!]
  pno: CLEPno
  powerTrain: PowerTrain
  salesVersion: CLESalesVersion
  seats: Seats
  steering: GroupableFeature
  trimLevel: TrimLevel
  upholstery: CLEUpholstery
  wheels: DescribableFeature
}

type CONFIGURATION_DATA {
  satisfiedPno12s(policy: String): [SATISFIED_PNO12!]
  pno12s(policy: String!): [PNO12!]
  components(policy: String!, locale: String!, modelYear: Int!, model: Int!, filter: FILTER_COMPONENTS): [CONFIG_COMPONENT!]
}

type CONFIGURATION_DETAILS_QUERY {
  _state: String
  car: Car
  PRICE_CONFIG_IN: PRICE_CONFIGURATION_OUTPUT!

  """
  Language is combination of ISO 639-1 langugage code and ISO 3166-1 Alpha-2 code, 
  
  
  For example: sv-SE is a swedish locale of Sweden
  """
  LOCALE: String!

  """
  Pno34Plus holds the configuration state in a string format - Market+ MY+ Model+ Pno34 + Options + Pack  
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Specification market or Program Market code"""
  specMarket: String

  """Unique Policy ID string for policy"""
  policyUid: String!

  """Configuration state at the starting point"""
  startingConfiguration: String!

  """Calculated strucure week of the configuration"""
  structureWeek: Int!

  """
  The current configuration which changes applied on starting configuration
  """
  currentConfiguration: String!

  """Need to check........."""
  currentUrl: String

  """Model year of the configuration"""
  modelYear: Int

  """Model family of the configuration"""
  modelFamily: MODEL_FAMILY!

  """Color on the configuration"""
  color: COL!

  """Upholstery on the configuraion"""
  upholstery: UPH

  """Set of options on the configuration"""
  options: [OPT!]!

  """Set of packages on the configuration"""
  packages: [PACKAGE!]!

  """Engine on the configuration"""
  engine: ENGINE!

  """Gearbox on the configuration"""
  gearbox: GEARBOX!

  """Body on the configuration"""
  body: BODY!

  """Salesversion on the configuration"""
  salesVersion: SALES_VERSION!

  """Steering on the configuration"""
  steering: STEERING!

  """Marketing code on the configuration"""
  marketingCode: MARKETING_CODE!

  """SMessage on the configuration"""
  sMessage: S_MESSAGE

  """
  Prices field holds price inforamtion of configuration
  For more details about pricing strategy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  prices: [PRICING]

  """Media information such as image url etc reveived from CAS"""
  media: MEDIAS

  """Feature belong to selected pno12 from CPAM"""
  features: [FEATURE!]

  """Standard features belonging to base configuration"""
  standardFeatures: [FEATURE!]

  """Overview holds the summary of the configuration"""
  overview: OVERVIEW

  """
  Technical data received from REDA, SCNG and CPAM
  For more details about technical data, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/technicalData.aspx
  """
  technicalData: TECHNICAL_DATA_DETAILS
  techincalData: TECHNICAL_DATA_DETAILS

  """Configuration information"""
  configurationInformation: CONFIGURATION_INFORMATION

  """Contains information about whether the configuration is valid or not"""
  configurationValidation: CONFIGURATION_VALIDATION

  """
  Transfers a token to any given (exclusive or in combination) policy, model year, structure week, pno12 and client
  """
  transferToken(policy: String, pno12: String, structureWeek: Int, client: String, modelYear: Int, editionOptionCode: String, selectionStrategy: SELECTION_STRATEGY): TOKEN_CHANGE
}

type CONFIGURATION_INFORMATION {
  displayName: String
  priceListDisplayName: String
  drivelineLongDisplayName: String
  model: CONFIGURATION_INFORMATION_ENTRY
  family: CONFIGURATION_INFORMATION_ENTRY
  modelFamily: CONFIGURATION_INFORMATION_ENTRY
  trimLevel: CONFIGURATION_INFORMATION_ENTRY
  driveline: CONFIGURATION_INFORMATION_ENTRY
  seats: CONFIGURATION_INFORMATION_ENTRY
  modelCategory: CONFIGURATION_INFORMATION_ENTRY
  salesVersion: CONFIGURATION_INFORMATION_ENTRY
}

type CONFIGURATION_INFORMATION_ENTRY {
  """Key gives an unique name to a type"""
  key: String

  """This gives short description of the given type"""
  displayName: String

  """This gives long description of the given type"""
  description: String

  """
  Define various types such as model, family, modelFamily, trimLevel, driveline, seats
  """
  type: String

  """This gives a numeric value of the given type if available"""
  value: Float

  """Price difference between the starting and the current configuration"""
  deltaPrice: Float

  """
  Display price difference between the starting and the current configuration
  """
  deltaDisplayPrice: String

  """Information about the starting configuration"""
  upgradedFrom: UPGRADED_FROM
}

type CONFIGURATION_VALIDATION {
  invalid: Boolean!
  invalidReason: String
}

enum CONFIGURATION_WINDOW {
  Current
  Past
  Future
  All
}

type ConfigurationError {
  message: String
}

enum ConfigurationSelectionStrategy {
  AllSelected
  FullPackageContent
  KeepAll
  NoPackageContent
}

"""A configuration token is a unique identifier for a configuration."""
type ConfigurationToken {
  carKey: CarKey
  long: String
  name: String
  short: String
  userFriendly: String
}

"""
ConfigurationWindow represents the different time windows for which configuration can take place.   
"""
enum ConfigurationWindow {
  All
  Current
  Future
  Past
}

type COUNTRY_CONFIGURATION {
  country: String!
  cpamSpecMarkets: [String]
  salesModelSettings: [SALES_MODEL_SETTING]
  energyEfficiencySettings: ENERGY_EFFICIENCY_SETTINGS!
  energyEfficiencyRange: String
  locales: [LOCALE_ENTRY!]
}

input COUNTRY_CONFIGURATION_INPUT {
  key: String
  value: String
}

enum CUSTOMER_TYPE {
  b2c
  b2b
}

type CUSTOMER_TYPE_PRICE_INPUT {
  customerType: CUSTOMER_TYPE
  settings: [PRICE_SETTING]
}

type CustomerTypeSubscriptionPrice {
  fix: SalesModelTypeSubscriptionPrice
  flex: SalesModelTypeSubscriptionPrice
  lowestMonthlyGrossAmount: Float
  lowestMonthlyNetAmount: Float
  lowestPricedSalesModel: String
}

type DATA {
  _state: String
  car: Car

  """
  Lists all valid colors of selected PNO12 wih state and token information
  """
  colors(field: String, value: String, include: Boolean): [COL!]

  """
  Lists all valid upholsteries of selected PNO12 wih state and token information
  """
  upholsteries: [UPH]

  """
  Lists all valid options of selected PNO12 wih state and token information
  """
  options(field: String, value: String, include: Boolean, filter: FILTER_COMPONENTS): [OPT!]

  """
  Lists all valid packages of selected PNO12 wih state and token information
  """
  packages: [PACKAGE!]

  """
  Overview shows the summary information of configuration, technical data etc
  """
  overview: OVERVIEW

  """Shows the engine information set on the configuration"""
  engine: [ENGINE!]

  """
  List all features received from CPAM for the given pno12 incl 100% opt + color + uph + sw 
  """
  features: [FEATURE!]

  """List all standard features received starting configuration"""
  standardFeatures: [FEATURE!]

  """
  Lists all valid S-Messages of selected PNO12 with state and token information
  """
  sMessages: [S_MESSAGE!]

  """Shows sales version set on the configuration"""
  salesversion: [SALES_VERSION!]

  """
  Technical data received from REDA, SCNG and CPAM
  For more details about technical data, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/technicalData.aspx
  """
  technicalData: TECHNICAL_DATA_DETAILS

  """Media image urls information from CAS"""
  media: MEDIAS

  """Configuration information"""
  configurationInformation: CONFIGURATION_INFORMATION

  """Contains information about whether the configuration is valid or not"""
  configurationValidation: CONFIGURATION_VALIDATION

  """Interior Rooms"""
  interiorRooms: [INTERIOR_ROOM!]

  """
  Transfers a token to any given (exclusive or in combination) policy, model year, structure week, pno12, client and editionOptionCode
  """
  transferToken(policy: String, pno12: String, structureWeek: Int, client: String, modelYear: Int, editionOptionCode: String, selectionStrategy: SELECTION_STRATEGY): TOKEN_CHANGE
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Dealer {
  addresses: [DealerAddress!]
  doingBusinessAs: String
  id: String!
  location: Location
  names: [Description!]
}

type DealerAddress {
  addressLine1: String!
  city: String!
  countryCode: String!
  district: String!
  language: String!
  postalCode: String!
}

"""Decimal Property"""
type DecimalProperty {
  """value formatted for display according to market setting"""
  formatted: String

  """label describing value"""
  label: String

  """describing which unit the value has"""
  unit: String
  value: Float
}

"""Decimal Range Property"""
type DecimalRangeProperty {
  """value formatted for display according to market setting"""
  formatted: String

  """label describing value"""
  label: String
  maxValue: Float
  minValue: Float

  """describing which unit the value has"""
  unit: String
  value: Float
}

type DELIVERY_INFORMATION {
  deliveryFrom: String
  deliveryTo: String
}

type DEPENDENT {
  """Code of the component"""
  name: String

  """This is not used"""
  text: String

  """Short description of the component"""
  displayName: String

  """Long description of the component"""
  description: String

  """Image URL-1"""
  image1: String

  """Image URL-2"""
  image2: String

  """Video URL-1"""
  video1: String

  """Video URL-2"""
  video2: String

  """Category of the component"""
  category: String

  """Price of the component"""
  price: Float

  """Component should be visible or not"""
  visible: Boolean

  """Type of the component"""
  type: String

  """Required option (must rule) for the respective component"""
  required: [DEPENDENT!]

  """Must with exchangeable component"""
  requiresExclusively: [[DEPENDENT!]!]

  """Component price"""
  componentPrice: PRICE_DATA

  """
  Pricing hold detailed information of prices and tax
  For more details about pricing strategy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]
  _state: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PrismGenericContent
}

type DescribableFeature {
  code: String
  description: [Description!]
}

type Description {
  language: String
  text: String
}

type DRIVE_TYPE {
  """
  This holds the id/ unique string of respective type. For example: electric-petrol for fuel type
  """
  id: String

  """This holds the display name of the type"""
  displayName: String
}

type Driveline {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): DrivelineContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type DrivelineContent {
  accelerationTo60MilesPerHour: DecimalProperty
  accelerationTo100KilimetersPerHour: DecimalProperty
  chinaCltcCityAerElectricRange: DecimalRangeProperty
  chinaCltcCityEaerElectricRange: DecimalRangeProperty
  chinaCltcCityPerElectricRange: DecimalRangeProperty
  chinaCltcCombinedAerElectricRange: DecimalRangeProperty
  chinaCltcCombinedCo2: DecimalRangeProperty
  chinaCltcCombinedEaerElectricRange: DecimalRangeProperty
  chinaCltcCombinedFuelConsumption: DecimalRangeProperty
  chinaCltcCombinedFuelEfficiency: DecimalRangeProperty
  chinaCltcCombinedPerElectricRange: DecimalRangeProperty
  chinaCltcExtraHighSpeedCo2: DecimalRangeProperty
  chinaCltcExtraHighSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcHighSpeedCo2: DecimalRangeProperty
  chinaCltcHighSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcLowSpeedCo2: DecimalRangeProperty
  chinaCltcLowSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcMediumSpeedCo2: DecimalRangeProperty
  chinaCltcMediumSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcPetrolCombinedCo2: DecimalRangeProperty
  chinaCltcPetrolCombinedFuelConsumption: DecimalRangeProperty
  chinaCltcPetrolCombinedFuelEfficiency: DecimalRangeProperty
  chinaCltcPureElectricConsumption: DecimalRangeProperty
  chinaCltcWeightedCombinedCo2: DecimalRangeProperty
  chinaCltcWeightedCombinedFuelConsumption: DecimalRangeProperty
  chinaCltcWeightedCombinedFuelEfficiency: DecimalRangeProperty
  chinaCltcWeightedElectricConsumption: DecimalRangeProperty
  curbWeightDistributionFront: DecimalProperty
  curbWeightDistributionRear: DecimalProperty
  curbWeightMaxKilos: DecimalProperty
  curbWeightMaxPounds: DecimalProperty
  curbWeightStandardKilos: DecimalProperty
  curbWeightStandardPounds: DecimalProperty
  description: StringProperty
  displayName: StringProperty
  driveType: DriveTypeProperty
  engineCode: String!
  entityType: UpstreamEntityTypeProperty
  finalDrive: DecimalProperty
  gearboxCode: String!
  gearboxFullName: StringProperty
  grossVehicleWeightKilos: DecimalProperty
  grossVehicleWeightPounds: DecimalProperty
  image: ImageProperty
  japanCombinedCo2Emission: DecimalProperty
  japanCombinedFuelEfficiency: DecimalProperty
  japanElectricRange: DecimalProperty
  japanPureElectricConsumption: DecimalProperty
  loadCapacityMaxWeightKilos: DecimalProperty
  loadCapacityMaxWeightPounds: DecimalProperty
  massInRunningOrderTotalKilos: DecimalProperty
  massInRunningOrderTotalPounds: DecimalProperty
  meta: SystemMeta
  modelCode: String!
  nedcCombinedCo2Emission: DecimalProperty
  nedcCombinedFuelConsumption: DecimalProperty
  nedcCombinedFuelEfficiency: DecimalProperty
  nedcElectricRange: DecimalProperty
  nedcEudcCo2Emission: DecimalProperty
  nedcEudcFuelConsumption: DecimalProperty
  nedcPetrolCombinedCo2Emission: DecimalProperty
  nedcPetrolCombinedFuelConsumption: DecimalProperty
  nedcPetrolCombinedFuelEfficiency: DecimalProperty
  nedcPureElectricConsumption: DecimalProperty
  nedcUdcCo2Emission: DecimalProperty
  nedcUdcFuelConsumption: DecimalProperty
  nedcWeightedCombinedCo2Emission: DecimalProperty
  nedcWeightedCombinedFuelConsumption: DecimalProperty
  nedcWeightedCombinedFuelEfficiency: DecimalProperty
  nedcWeightedElectricConsumption: DecimalProperty
  overseasNedcCombinedCo2Emission: DecimalProperty
  overseasNedcCombinedFuelConsumption: DecimalProperty
  overseasNedcCombinedFuelEfficiency: DecimalProperty
  overseasNedcElectricRange: DecimalProperty
  overseasNedcEudcCo2Emission: DecimalProperty
  overseasNedcEudcFuelConsumption: DecimalProperty
  overseasNedcPetrolCombinedCo2Emission: DecimalProperty
  overseasNedcPetrolCombinedFuelConsumption: DecimalProperty
  overseasNedcPetrolCombinedFuelEfficiency: DecimalProperty
  overseasNedcPureElectricConsumption: DecimalProperty
  overseasNedcUdcCo2Emission: DecimalProperty
  overseasNedcUdcFuelConsumption: DecimalProperty
  overseasNedcWeightedCombinedCo2Emission: DecimalProperty
  overseasNedcWeightedCombinedFuelConsumption: DecimalProperty
  overseasNedcWeightedCombinedFuelEfficiency: DecimalProperty
  overseasNedcWeightedElectricConsumption: DecimalProperty
  roofLoadMaxWeightKilos: DecimalProperty
  roofLoadMaxWeightPounds: DecimalProperty
  shortDescription: StringProperty
  tongueMaxWeightKilos: DecimalProperty
  tongueMaxWeightPounds: DecimalProperty
  topSpeedKilometersPerHour: DecimalProperty
  topSpeedMilesPerHour: DecimalProperty
  trailerMaxWeightKilos: DecimalProperty
  trailerMaxWeightPounds: DecimalProperty
  transmissionType: TransmissionTypeProperty
  unbrakedTrailerMaxWeightKilos: DecimalProperty
  unbrakedTrailerMaxWeightPounds: DecimalProperty
  usFuelEconomyCityFuelEfficiency: DecimalProperty
  usFuelEconomyCombinedElectricConsumption: DecimalProperty
  usFuelEconomyCombinedFuelConsumption: DecimalProperty
  usFuelEconomyCombinedFuelEfficiency: DecimalProperty
  usFuelEconomyCombinedGasolineEquivalentFuelEfficiency: DecimalProperty
  usFuelEconomyElectricPlusGasolineRange: DecimalProperty
  usFuelEconomyHighwayFuelEfficiency: DecimalProperty
  usFuelEconomyPureElectricConsumption: DecimalProperty
  usFuelEconomyPureElectricRange: DecimalProperty
  video: VideoProperty
  wltpCityAerElectricRange: DecimalRangeProperty
  wltpCityEaerElectricRange: DecimalRangeProperty
  wltpCityPerElectricRange: DecimalRangeProperty
  wltpCombinedAerElectricRange: DecimalRangeProperty
  wltpCombinedCo2: DecimalRangeProperty
  wltpCombinedEaerElectricRange: DecimalRangeProperty
  wltpCombinedFuelConsumption: DecimalRangeProperty
  wltpCombinedFuelEfficiency: DecimalRangeProperty
  wltpCombinedPerElectricRange: DecimalRangeProperty
  wltpExtraHighSpeedCo2: DecimalRangeProperty
  wltpExtraHighSpeedFuelConsumption: DecimalRangeProperty
  wltpHighSpeedCo2: DecimalRangeProperty
  wltpHighSpeedFuelConsumption: DecimalRangeProperty
  wltpLowSpeedCo2: DecimalRangeProperty
  wltpLowSpeedFuelConsumption: DecimalRangeProperty
  wltpMediumSpeedCo2: DecimalRangeProperty
  wltpMediumSpeedFuelConsumption: DecimalRangeProperty
  wltpPetrolCombinedCo2: DecimalRangeProperty
  wltpPetrolCombinedFuelConsumption: DecimalRangeProperty
  wltpPetrolCombinedFuelEfficiency: DecimalRangeProperty
  wltpPureElectricConsumption: DecimalRangeProperty
  wltpWeightedCombinedCo2: DecimalRangeProperty
  wltpWeightedCombinedFuelConsumption: DecimalRangeProperty
  wltpWeightedCombinedFuelEfficiency: DecimalRangeProperty
  wltpWeightedElectricConsumption: DecimalRangeProperty
}

"""Unapplied Driveline exceptions"""
type DrivelineException {
  content: EnrichedDrivelineContent!
  rule: ExceptionRule!
}

type DriveTrain {
  driveLine: String
  driveType: String
  gearbox: CLEGearbox
}

enum DriveType {
  AWD
  E_AWD
  FWD
  RWD
}

"""Drive Type Property"""
type DriveTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: DriveType
  valueDescription: String
}

"""Drive types"""
type DriveTypes {
  awd: DriveTypeProperty!
  eAWD: DriveTypeProperty!
  fwd: DriveTypeProperty!
  rwd: DriveTypeProperty!
}

type EfficiencyClassification {
  co2EmissionDetails: Float
  driveLineEFC: String
  efficiencyClass: String
  efficiencyClassBest: String
  efficiencyClassWorst: String
  efficiencyRanges: [String!]
  errorMessage: errorMessage
  id: String
  modelYear: Int
  petrolEquivalentValue: Float
  pno12: String
  specificationMarket: String
}

"""Electric Ranges"""
type ElectricRanges {
  extendedRange: ElectricRangeTypeProperty!
  performance: ElectricRangeTypeProperty!
  standardRange: ElectricRangeTypeProperty!
}

enum ElectricRangeType {
  EXTENDED_RANGE
  PERFORMANCE
  STANDARD_RANGE
}

"""Electric Range Type Property"""
type ElectricRangeTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: ElectricRangeType
  valueDescription: String
}

type ENERGY_EFFICIENCY {
  """
  This holds the component by which the efficiency class calculation is based on. For example Co2 Emission
  """
  primaryComponent: ENERGY_EFFICIENCY_COMPONENT

  """
  This holds the details of energy efficiency details, whether the data is preliminary or not and groups etc.
  """
  details: ENERGY_EFFICIENCY_DETAILS

  """The acutal calculated efficiency class of a car configured"""
  efficiencyClass: String

  """
  Efficiency class best is calculated based on low co2 or fuel consumption
  """
  efficiencyClassBest: String

  """
  Efficiency class worst is calculated based on high co2 or fuel consumption
  """
  efficiencyClassWorst: String

  """This holds efficiency class ranges """
  efficiencyClassRange: [String]
}

type ENERGY_EFFICIENCY_COMPONENT {
  """Display name of the primay component"""
  name: String

  """Unit of primary component. For example g/km for co2"""
  unit: String

  """Actual value of the primary component"""
  value: String

  """Description of the primary component"""
  description: String

  """Type of the primary component"""
  type: String

  """Classification of the primary component. For example wltp"""
  classification: String

  """Driving cycle of the primary component. For example total"""
  drivingCycle: String

  """Measurement based on. For example : co2"""
  measurement: MEASUREMENT
}

type ENERGY_EFFICIENCY_DETAILS {
  """This field is not used"""
  preTitle: String

  """This field is not used"""
  title: String

  """This field is not used"""
  description: String

  """Flag to denote whether the value is preliminary or official"""
  isPreliminary: Boolean

  """
  This lists the groups defined in REDA. Wltp and Nedc are the two groups
  """
  groups: [ENERGY_EFFICIENCY_GROUP]
}

type ENERGY_EFFICIENCY_GROUP {
  """ID of group"""
  id: String

  """Label of the group"""
  label: String

  """The component which is used for efficiency class calculation"""
  components: [ENERGY_EFFICIENCY_COMPONENT]
}

type ENERGY_EFFICIENCY_SETTINGS {
  defaultCO2: String
  energyEfficiencyKeys: [ENERGY_EFFICIENCY_SETTINGS_ENTRY!]
}

type ENERGY_EFFICIENCY_SETTINGS_ENTRY {
  name: String
  values: [String!]
}

type Engine {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): EngineContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type ENGINE {
  """Engine code"""
  name: String

  """This is not used"""
  text: String

  """This is not used"""
  pno12: String

  """Category of the engine"""
  category: String

  """Tags defined for engine"""
  tags: [String!]

  """Fuel type display name"""
  fuelTypeDisplayName: String

  """Engine type description"""
  engineTypeDescription: String

  """Short description of the feature"""
  displayName: String

  """Fuel type of engine"""
  fuelType: String

  """Fuel type details"""
  fuelTypeDetails: FUEL_TYPE

  """Slug"""
  slug: String

  """Engine category"""
  engineCategory: String

  """Component type id - CPAM component type"""
  componentTypeId: String

  """Display Type"""
  displayType: COMPONENT_DISPLAY_TYPE
}

type ENGINE_TYPE {
  """
  This holds the id/ unique string of respective type. For example: electric-petrol for fuel type
  """
  id: String

  """This holds the display name of the type"""
  displayName: String
}

type EngineContent {
  batteryChargingDurationHrsUsingAc1At110To120VAt6A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At110To120VAt10A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At110To120VAt16A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt6A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt10A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt16A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt32A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt48A: DecimalProperty
  batteryChargingDurationHrsUsingAc3At6A: DecimalProperty
  batteryChargingDurationHrsUsingAc3At10A: DecimalProperty
  batteryChargingDurationHrsUsingAc3At16A: DecimalProperty
  batteryChargingDurationMinutesUsingDcAt50Kw: DecimalProperty
  batteryChargingDurationMinutesUsingDcAt150Kw: DecimalProperty
  batteryNominalEnergyKwh: DecimalProperty
  batteryUsableEnergyKwh: DecimalProperty
  boreInches: DecimalProperty
  boreMillimeters: DecimalProperty
  camshaftType: CamshaftTypeProperty
  chinaEmissionLevel: StringProperty
  compressionRatio: DecimalProperty
  description: StringProperty
  displacementCubicFeet: DecimalProperty
  displacementCubicMeters: DecimalProperty
  displayName: StringProperty
  electricPowerKw: DecimalProperty
  electricPowerKwRevRps: DecimalRangeProperty
  electricPowerMechanicalHp: DecimalProperty
  electricPowerMechanicalHpRevRpm: DecimalRangeProperty
  electricPowerMetricHp: DecimalProperty
  electricPowerMetricHpRevRpm: DecimalRangeProperty
  electricRangeType: ElectricRangeTypeProperty
  electricTorqueKpm: DecimalProperty
  electricTorqueKpmRevRpm: DecimalRangeProperty
  electricTorqueLbfFt: DecimalProperty
  electricTorqueLbfFtRevRpm: DecimalRangeProperty
  electricTorqueNm: DecimalProperty
  electricTorqueNmRevRps: DecimalRangeProperty
  engineCode: String!
  engineType: EngineTypeProperty
  entityType: UpstreamEntityTypeProperty
  euEmissionLevel: StringProperty
  firingOrder: StringProperty
  fuelType: FuelTypeProperty
  fullName: StringProperty
  idleEngineSpeedRpm: DecimalProperty
  idleEngineSpeedVariationRpm: DecimalProperty
  image: ImageProperty
  japanEmissionLevel: StringProperty
  maxEngineSpeedRpm: DecimalProperty
  meta: SystemMeta
  numCylinders: IntProperty
  numValves: IntProperty
  overrevDuration: DecimalProperty
  overrevEngineSpeedRpm: DecimalProperty
  powerKw: DecimalProperty
  powerKwRevRps: DecimalRangeProperty
  powerMechanicalHp: DecimalProperty
  powerMechanicalHpRevRpm: DecimalRangeProperty
  powerMetricHp: DecimalProperty
  powerMetricHpRevRpm: DecimalRangeProperty
  shortDescription: StringProperty
  shortName: StringProperty
  strokeInches: DecimalProperty
  strokeMillimeters: DecimalProperty
  torqueKpm: DecimalProperty
  torqueKpmRevRpm: DecimalRangeProperty
  torqueLbfFt: DecimalProperty
  torqueLbfFtRevRpm: DecimalRangeProperty
  torqueNm: DecimalProperty
  torqueNmRevRps: DecimalRangeProperty
  totalPowerKw: DecimalProperty
  totalPowerMechanicalHp: DecimalProperty
  totalPowerMetricHp: DecimalProperty
  usEmissionLevel: StringProperty
  video: VideoProperty
}

"""Unapplied Engine exceptions"""
type EngineException {
  content: EnrichedEngineContent!
  rule: ExceptionRule!
}

enum EngineType {
  BEV
  HEV
  NHEV
  PHEV
}

"""Engine Type Property"""
type EngineTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: EngineType
  valueDescription: String
}

"""Engine types"""
type EngineTypes {
  bev: EngineTypeProperty!
  hev: EngineTypeProperty!
  nhev: EngineTypeProperty!
  phev: EngineTypeProperty!
}

"""CarType Entry"""
type EnrichedCarType {
  codes: EnrichedCarTypeCodes!
  content: EnrichedCarTypeContent!
  entityId: String!
  exceptions: [CarTypeException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""CarType Codes"""
type EnrichedCarTypeCodes {
  modelCode: String!
}

"""Enriched Car Type"""
type EnrichedCarTypeContent {
  approachAngle: DecimalProperty
  bodyWidthInches: DecimalProperty
  bodyWidthMillimeters: DecimalProperty
  breakOverAngle: DecimalProperty
  carTypeCategory: CarTypeCategoryProperty
  cargoCapacityFrontCubicFeet: DecimalProperty
  cargoCapacityFrontLiters: DecimalProperty
  cargoCapacityMaxCubicFeet: DecimalProperty
  cargoCapacityMaxLiters: DecimalProperty
  cargoCapacityWithRepairKitCubicFeet: DecimalProperty
  cargoCapacityWithRepairKitLiters: DecimalProperty
  cargoCapacityWithSpareWheelCubicFeet: DecimalProperty
  cargoCapacityWithSpareWheelLiters: DecimalProperty
  coefficientOfDrag: DecimalProperty
  depatureAngle: DecimalProperty
  description: StringProperty
  displayName: StringProperty
  dragArea: DecimalProperty
  entityType: UpstreamEntityTypeProperty
  frontOverhangInches: DecimalProperty
  frontOverhangMillimeters: DecimalProperty
  frontTrackWidthInches: DecimalProperty
  frontTrackWidthMillimeters: DecimalProperty
  frontalAreaFeetSquare: DecimalProperty
  frontalAreaMeterSquare: DecimalProperty
  fuelCapacityImperialGallons: DecimalProperty
  fuelCapacityLiters: DecimalProperty
  fuelCapacityUsGallons: DecimalProperty
  groundClearanceAtCurbWeightInches: DecimalProperty
  groundClearanceAtCurbWeightMillimeters: DecimalProperty
  groundClearanceAtCurbWeightWithOnePersonInches: DecimalProperty
  groundClearanceAtCurbWeightWithOnePersonMillimeters: DecimalProperty
  headRoomFrontInches: DecimalProperty
  headRoomFrontMillimeters: DecimalProperty
  headRoomRearInches: DecimalProperty
  headRoomRearMillimeters: DecimalProperty
  hipRoomFrontInches: DecimalProperty
  hipRoomFrontMillimeters: DecimalProperty
  hipRoomRearInches: DecimalProperty
  hipRoomRearMillimeters: DecimalProperty
  image: ImageProperty
  kneeClearanceRearInches: DecimalProperty
  kneeClearanceRearMillimeters: DecimalProperty
  legRoomFrontInches: DecimalProperty
  legRoomFrontMillimeters: DecimalProperty
  legRoomRearInches: DecimalProperty
  legRoomRearMillimeters: DecimalProperty
  maxHeadRoomFrontInches: DecimalProperty
  maxHeadRoomFrontMillimeters: DecimalProperty
  maxHeadRoomRearInches: DecimalProperty
  maxHeadRoomRearMillimeters: DecimalProperty
  rearOverhangInches: DecimalProperty
  rearOverhangMeters: DecimalProperty
  seatCapacity: IntProperty
  shortDescription: StringProperty
  shortName: StringProperty
  shoulderRoomFrontInches: DecimalProperty
  shoulderRoomFrontMillimeters: DecimalProperty
  shoulderRoomRearInches: DecimalProperty
  shoulderRoomRearMillimeters: DecimalProperty
  steeringRatio: DecimalProperty
  turningCircleCurbToCurbInches: DecimalProperty
  turningCircleCurbToCurbMillimeters: DecimalProperty
  turningCircleWallToWallInches: DecimalProperty
  turningCircleWallToWallMillimeters: DecimalProperty
  turnsOfSteeringWheelEndToEnd: DecimalProperty
  vehicleHeightAtCurbWeightInches: DecimalProperty
  vehicleHeightAtCurbWeightMillimeters: DecimalProperty
  vehicleHeightAtCurbWeightWithOnePersonInches: DecimalProperty
  vehicleHeightAtCurbWeightWithOnePersonMillimeters: DecimalProperty
  vehicleHeightAtCurbWeightWithOpenTrunkInches: DecimalProperty
  vehicleHeightAtCurbWeightWithOpenTrunkMillimeters: DecimalProperty
  vehicleLengthInches: DecimalProperty
  vehicleLengthMillimeters: DecimalProperty
  vehicleWidthInches: DecimalProperty
  vehicleWidthMillimeters: DecimalProperty
  vehicleWidthMirrorsFoldedInches: DecimalProperty
  vehicleWidthMirrorsFoldedMillimeters: DecimalProperty
  vehicleWidthMirrorsIncludedInches: DecimalProperty
  vehicleWidthMirrorsIncludedMillimeters: DecimalProperty
  video: VideoProperty
  wadingCapabilityDepthInches: DecimalProperty
  wadingCapabilityDepthMillimeters: DecimalProperty
  wheelBaseInches: DecimalProperty
  wheelBaseMillimeters: DecimalProperty
}

"""Category content"""
type EnrichedCategoryContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  shortDescription: StringProperty
  video: VideoProperty
}

"""A category"""
type EnrichedCategoryNode {
  children: [EnrichedCategoryNode!]!
  content: EnrichedCategoryContent!
  systemName: String!
}

"""A colour"""
type EnrichedColour {
  codes: EnrichedColourCodes!
  content: EnrichedColourContent!
  entityId: String!
  exceptions: [ColourException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Colour codes"""
type EnrichedColourCodes {
  colourCode: String!
}

"""Colour content"""
type EnrichedColourContent {
  baseColor: BaseColourProperty
  baseColour: BaseColourProperty @deprecated(reason: "Use `baseColor` instead")
  colorType: ColourTypeProperty
  colourType: ColourTypeProperty @deprecated(reason: "Use `colorType` instead")
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  hex: StringProperty
  image: ImageProperty
  shortDescription: StringProperty
  swatchImage: ImageProperty
  video: VideoProperty
}

"""A component (feature, accessory or option)"""
type EnrichedComponent {
  categoryPath: [String!]!
  codes: EnrichedComponentCodes!
  content: EnrichedComponentContent!
  entityId: String!
  exceptions: [ComponentException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Feature, Option & Accessory codes"""
type EnrichedComponentCodes {
  accessoryCodes: [String!]!
  featureCodes: [String!]!
  optionCodes: [String!]!
}

"""Component Content (feature, accessory or option)"""
type EnrichedComponentContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  shortDescription: StringProperty
  video: VideoProperty
}

"""A driveline"""
type EnrichedDriveline {
  codes: EnrichedDrivelineCodes!
  content: EnrichedDrivelineContent!
  entityId: String!
  exceptions: [DrivelineException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Driveline codes"""
type EnrichedDrivelineCodes {
  engineCode: String!
  gearboxCode: String!
  modelCode: String!
}

"""Driveline"""
type EnrichedDrivelineContent {
  accelerationTo60MilesPerHour: DecimalProperty
  accelerationTo100KilimetersPerHour: DecimalProperty
  chinaCltcCityAerElectricRange: DecimalRangeProperty
  chinaCltcCityEaerElectricRange: DecimalRangeProperty
  chinaCltcCityPerElectricRange: DecimalRangeProperty
  chinaCltcCombinedAerElectricRange: DecimalRangeProperty
  chinaCltcCombinedCo2: DecimalRangeProperty
  chinaCltcCombinedEaerElectricRange: DecimalRangeProperty
  chinaCltcCombinedFuelConsumption: DecimalRangeProperty
  chinaCltcCombinedFuelEfficiency: DecimalRangeProperty
  chinaCltcCombinedPerElectricRange: DecimalRangeProperty
  chinaCltcExtraHighSpeedCo2: DecimalRangeProperty
  chinaCltcExtraHighSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcHighSpeedCo2: DecimalRangeProperty
  chinaCltcHighSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcLowSpeedCo2: DecimalRangeProperty
  chinaCltcLowSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcMediumSpeedCo2: DecimalRangeProperty
  chinaCltcMediumSpeedFuelConsumption: DecimalRangeProperty
  chinaCltcPetrolCombinedCo2: DecimalRangeProperty
  chinaCltcPetrolCombinedFuelConsumption: DecimalRangeProperty
  chinaCltcPetrolCombinedFuelEfficiency: DecimalRangeProperty
  chinaCltcPureElectricConsumption: DecimalRangeProperty
  chinaCltcWeightedCombinedCo2: DecimalRangeProperty
  chinaCltcWeightedCombinedFuelConsumption: DecimalRangeProperty
  chinaCltcWeightedCombinedFuelEfficiency: DecimalRangeProperty
  chinaCltcWeightedElectricConsumption: DecimalRangeProperty
  curbWeightDistributionFront: DecimalProperty
  curbWeightDistributionRear: DecimalProperty
  curbWeightMaxKilos: DecimalProperty
  curbWeightMaxPounds: DecimalProperty
  curbWeightStandardKilos: DecimalProperty
  curbWeightStandardPounds: DecimalProperty
  description: StringProperty
  displayName: StringProperty
  driveType: DriveTypeProperty
  entityType: UpstreamEntityTypeProperty
  finalDrive: DecimalProperty
  gearboxFullName: StringProperty
  grossVehicleWeightKilos: DecimalProperty
  grossVehicleWeightPounds: DecimalProperty
  image: ImageProperty
  japanCombinedCo2Emission: DecimalProperty
  japanCombinedFuelEfficiency: DecimalProperty
  japanElectricRange: DecimalProperty
  japanPureElectricConsumption: DecimalProperty
  loadCapacityMaxWeightKilos: DecimalProperty
  loadCapacityMaxWeightPounds: DecimalProperty
  massInRunningOrderTotalKilos: DecimalProperty
  massInRunningOrderTotalPounds: DecimalProperty
  nedcCombinedCo2Emission: DecimalProperty
  nedcCombinedFuelConsumption: DecimalProperty
  nedcCombinedFuelEfficiency: DecimalProperty
  nedcElectricRange: DecimalProperty
  nedcEudcCo2Emission: DecimalProperty
  nedcEudcFuelConsumption: DecimalProperty
  nedcPetrolCombinedCo2Emission: DecimalProperty
  nedcPetrolCombinedFuelConsumption: DecimalProperty
  nedcPetrolCombinedFuelEfficiency: DecimalProperty
  nedcPureElectricConsumption: DecimalProperty
  nedcUdcCo2Emission: DecimalProperty
  nedcUdcFuelConsumption: DecimalProperty
  nedcWeightedCombinedCo2Emission: DecimalProperty
  nedcWeightedCombinedFuelConsumption: DecimalProperty
  nedcWeightedCombinedFuelEfficiency: DecimalProperty
  nedcWeightedElectricConsumption: DecimalProperty
  overseasNedcCombinedCo2Emission: DecimalProperty
  overseasNedcCombinedFuelConsumption: DecimalProperty
  overseasNedcCombinedFuelEfficiency: DecimalProperty
  overseasNedcElectricRange: DecimalProperty
  overseasNedcEudcCo2Emission: DecimalProperty
  overseasNedcEudcFuelConsumption: DecimalProperty
  overseasNedcPetrolCombinedCo2Emission: DecimalProperty
  overseasNedcPetrolCombinedFuelConsumption: DecimalProperty
  overseasNedcPetrolCombinedFuelEfficiency: DecimalProperty
  overseasNedcPureElectricConsumption: DecimalProperty
  overseasNedcUdcCo2Emission: DecimalProperty
  overseasNedcUdcFuelConsumption: DecimalProperty
  overseasNedcWeightedCombinedCo2Emission: DecimalProperty
  overseasNedcWeightedCombinedFuelConsumption: DecimalProperty
  overseasNedcWeightedCombinedFuelEfficiency: DecimalProperty
  overseasNedcWeightedElectricConsumption: DecimalProperty
  roofLoadMaxWeightKilos: DecimalProperty
  roofLoadMaxWeightPounds: DecimalProperty
  shortDescription: StringProperty
  tongueMaxWeightKilos: DecimalProperty
  tongueMaxWeightPounds: DecimalProperty
  topSpeedKilometersPerHour: DecimalProperty
  topSpeedMilesPerHour: DecimalProperty
  trailerMaxWeightKilos: DecimalProperty
  trailerMaxWeightPounds: DecimalProperty
  transmissionType: TransmissionTypeProperty
  unbrakedTrailerMaxWeightKilos: DecimalProperty
  unbrakedTrailerMaxWeightPounds: DecimalProperty
  usFuelEconomyCityFuelEfficiency: DecimalProperty
  usFuelEconomyCombinedElectricConsumption: DecimalProperty
  usFuelEconomyCombinedFuelConsumption: DecimalProperty
  usFuelEconomyCombinedFuelEfficiency: DecimalProperty
  usFuelEconomyCombinedGasolineEquivalentFuelEfficiency: DecimalProperty
  usFuelEconomyElectricPlusGasolineRange: DecimalProperty
  usFuelEconomyHighwayFuelEfficiency: DecimalProperty
  usFuelEconomyPureElectricConsumption: DecimalProperty
  usFuelEconomyPureElectricRange: DecimalProperty
  video: VideoProperty
  wltpCityAerElectricRange: DecimalRangeProperty
  wltpCityEaerElectricRange: DecimalRangeProperty
  wltpCityPerElectricRange: DecimalRangeProperty
  wltpCombinedAerElectricRange: DecimalRangeProperty
  wltpCombinedCo2: DecimalRangeProperty
  wltpCombinedEaerElectricRange: DecimalRangeProperty
  wltpCombinedFuelConsumption: DecimalRangeProperty
  wltpCombinedFuelEfficiency: DecimalRangeProperty
  wltpCombinedPerElectricRange: DecimalRangeProperty
  wltpExtraHighSpeedCo2: DecimalRangeProperty
  wltpExtraHighSpeedFuelConsumption: DecimalRangeProperty
  wltpHighSpeedCo2: DecimalRangeProperty
  wltpHighSpeedFuelConsumption: DecimalRangeProperty
  wltpLowSpeedCo2: DecimalRangeProperty
  wltpLowSpeedFuelConsumption: DecimalRangeProperty
  wltpMediumSpeedCo2: DecimalRangeProperty
  wltpMediumSpeedFuelConsumption: DecimalRangeProperty
  wltpPetrolCombinedCo2: DecimalRangeProperty
  wltpPetrolCombinedFuelConsumption: DecimalRangeProperty
  wltpPetrolCombinedFuelEfficiency: DecimalRangeProperty
  wltpPureElectricConsumption: DecimalRangeProperty
  wltpWeightedCombinedCo2: DecimalRangeProperty
  wltpWeightedCombinedFuelConsumption: DecimalRangeProperty
  wltpWeightedCombinedFuelEfficiency: DecimalRangeProperty
  wltpWeightedElectricConsumption: DecimalRangeProperty
}

"""An engine"""
type EnrichedEngine {
  codes: EnrichedEngineCodes!
  content: EnrichedEngineContent!
  entityId: String!
  exceptions: [EngineException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Engine codes"""
type EnrichedEngineCodes {
  engineCode: String!
}

"""An engine"""
type EnrichedEngineContent {
  batteryChargingDurationHrsUsingAc1At110To120VAt6A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At110To120VAt10A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At110To120VAt16A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt6A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt10A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt16A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt32A: DecimalProperty
  batteryChargingDurationHrsUsingAc1At220To240VAt48A: DecimalProperty
  batteryChargingDurationHrsUsingAc3At6A: DecimalProperty
  batteryChargingDurationHrsUsingAc3At10A: DecimalProperty
  batteryChargingDurationHrsUsingAc3At16A: DecimalProperty
  batteryChargingDurationMinutesUsingDcAt50Kw: DecimalProperty
  batteryChargingDurationMinutesUsingDcAt150Kw: DecimalProperty
  batteryNominalEnergyKwh: DecimalProperty
  batteryUsableEnergyKwh: DecimalProperty
  boreInches: DecimalProperty
  boreMillimeters: DecimalProperty
  camshaftType: CamshaftTypeProperty
  chinaEmissionLevel: StringProperty
  compressionRatio: DecimalProperty
  description: StringProperty
  displacementCubicFeet: DecimalProperty
  displacementCubicMeters: DecimalProperty
  displayName: StringProperty
  electricPowerKw: DecimalProperty
  electricPowerKwRevRps: DecimalRangeProperty
  electricPowerMechanicalHp: DecimalProperty
  electricPowerMechanicalHpRevRpm: DecimalRangeProperty
  electricPowerMetricHp: DecimalProperty
  electricPowerMetricHpRevRpm: DecimalRangeProperty
  electricRangeType: ElectricRangeTypeProperty
  electricTorqueKpm: DecimalProperty
  electricTorqueKpmRevRpm: DecimalRangeProperty
  electricTorqueLbfFt: DecimalProperty
  electricTorqueLbfFtRevRpm: DecimalRangeProperty
  electricTorqueNm: DecimalProperty
  electricTorqueNmRevRps: DecimalRangeProperty
  engineType: EngineTypeProperty
  entityType: UpstreamEntityTypeProperty
  euEmissionLevel: StringProperty
  firingOrder: StringProperty
  fuelType: FuelTypeProperty
  fullName: StringProperty
  idleEngineSpeedRpm: DecimalProperty
  idleEngineSpeedVariationRpm: DecimalProperty
  image: ImageProperty
  japanEmissionLevel: StringProperty
  maxEngineSpeedRpm: DecimalProperty
  numCylinders: IntProperty
  numValves: IntProperty
  overrevDuration: DecimalProperty
  overrevEngineSpeedRpm: DecimalProperty
  powerKw: DecimalProperty
  powerKwRevRps: DecimalRangeProperty
  powerMechanicalHp: DecimalProperty
  powerMechanicalHpRevRpm: DecimalRangeProperty
  powerMetricHp: DecimalProperty
  powerMetricHpRevRpm: DecimalRangeProperty
  shortDescription: StringProperty
  shortName: StringProperty
  strokeInches: DecimalProperty
  strokeMillimeters: DecimalProperty
  torqueKpm: DecimalProperty
  torqueKpmRevRpm: DecimalRangeProperty
  torqueLbfFt: DecimalProperty
  torqueLbfFtRevRpm: DecimalRangeProperty
  torqueNm: DecimalProperty
  torqueNmRevRps: DecimalRangeProperty
  totalPowerKw: DecimalProperty
  totalPowerMechanicalHp: DecimalProperty
  totalPowerMetricHp: DecimalProperty
  usEmissionLevel: StringProperty
  video: VideoProperty
}

"""A package"""
type EnrichedPackage {
  categoryPath: [String!]!
  codes: EnrichedPackageCode!
  content: EnrichedPackageContent!
  entityId: String!
  exceptions: [PackageException!]!
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Package code"""
type EnrichedPackageCode {
  packageCode: String!
}

"""Package content"""
type EnrichedPackageContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  shortDescription: StringProperty
  video: VideoProperty
}

"""Pno12"""
type EnrichedPno12 {
  displayName: String
  modelYear: Float!
  pno12: String
  priceListDisplayName: String
}

"""A sales level"""
type EnrichedSalesLevel {
  codes: EnrichedSalesLevelCode!
  content: EnrichedSalesLevelContent!
  entityId: String!
  exceptions: [SalesLevelException!]!
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Sales level code"""
type EnrichedSalesLevelCode {
  formattedRule: String!
  type: String!
}

"""Sales level content"""
type EnrichedSalesLevelContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  shortDescription: StringProperty
  video: VideoProperty
}

"""An upholstery"""
type EnrichedUpholstery {
  codes: EnrichedUpholsteryCodes!
  content: EnrichedUpholsteryContent!
  entityId: String!
  exceptions: [UpholsteryException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Upholstery codes"""
type EnrichedUpholsteryCodes {
  upholsteryCode: String!
}

"""Upholstery content"""
type EnrichedUpholsteryContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  shortDescription: StringProperty
  upholsteryMaterial: UpholsteryMaterialProperty
  video: VideoProperty
}

"""A wheel"""
type EnrichedWheel {
  categoryPath: [String!]!
  codes: EnrichedWheelCodes!
  content: EnrichedWheelContent!
  entityId: String!
  exceptions: [WheelException!]
  maxModelYear: Float!
  minModelYear: Float!
  state: String!
  systemName: String
}

"""Wheel codes"""
type EnrichedWheelCodes {
  accessoryCodes: [String!]
  optionCodes: [String!]
  rimCode: String!
  tireCode: String!
}

"""Wheel content"""
type EnrichedWheelContent {
  classification: ClassificationProperty
  construction: WheelConstructionProperty
  description: StringProperty
  diameterInches: DecimalProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  heightPercent: DecimalProperty
  image: ImageProperty
  loadIndex: IntProperty
  numberOfSpokes: IntProperty
  position: WheelPositionProperty
  shortDescription: StringProperty
  speedRating: StringProperty
  spokeType: WheelSpokeTypeProperty
  type: WheelTypeProperty
  video: VideoProperty
  widthMillimeters: DecimalProperty
}

"""Upstream entity types"""
type EntityTypes {
  accessory: UpstreamEntityTypeProperty!
  body: UpstreamEntityTypeProperty!
  color: UpstreamEntityTypeProperty!
  colour: UpstreamEntityTypeProperty! @deprecated(reason: "Use `color` instead")
  engine: UpstreamEntityTypeProperty!
  feature: UpstreamEntityTypeProperty!
  gearbox: UpstreamEntityTypeProperty!
  localOption: UpstreamEntityTypeProperty!
  marketingCode: UpstreamEntityTypeProperty!
  model: UpstreamEntityTypeProperty!
  option: UpstreamEntityTypeProperty!
  package: UpstreamEntityTypeProperty!
  pno12: UpstreamEntityTypeProperty!
  sMessage: UpstreamEntityTypeProperty!
  salesVersion: UpstreamEntityTypeProperty!
  steering: UpstreamEntityTypeProperty!
  upholstery: UpstreamEntityTypeProperty!
}

"""Enums"""
type Enums {
  baseColours: BaseColours!
  camshaftTypes: CamshaftTypes!
  classification: Classifications!
  colorTypes: ColourTypes!
  colourTypes: ColourTypes! @deprecated(reason: "Use `colorTypes` instead")
  driveTypes: DriveTypes!
  electricRanges: ElectricRanges!
  engineTypes: EngineTypes!
  entityTypes: EntityTypes!
  fuelTypes: FuelTypes!
  modelCategories: ModelCategories!
  transmissionTypes: TransmissionTypes!
  upholsteryMaterials: UpholsteryMaterials!
  wheelConstructions: WheelConstructions!
  wheelPositions: WheelPositions!
  wheelSpokeTypes: WheelSpokeTypes!
  wheelTypes: WheelTypes!
}

enum EnvironmentalClassification {
  NedC
  Wltp
}

type EnvironmentalData {
  allInternal: [TechnicalFloatDataComponent!]
  carKey: CarKey!
  overview(unitSystem: UnitSystem): [TechnicalFloatDataComponent!]
  all(unitSystem: UnitSystem = METRIC): [TechnicalFloatDataComponent!]
  co2Total(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  co2TotalWeighted(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionIpfHighWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionIpfLowWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionWltpExtraHigh(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionWltpHigh(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionWltpLow(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionWltpMedium(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricEnergyConsumptionWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeIpfHighWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeIpfLowWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeNedCCombined(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeWltpCity(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeWltpExtraHigh(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeWltpHigh(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeWltpLow(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeWltpMedium(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  electricRangeWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  fuelConsumptionWltpTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  fuelConsumptionWltpTotalWeighted(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  individualValues: JSON
  weightHomologationCurbWeightTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  weightMassOptionalEquipmentTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  weightMassRunningOrderIpfHigh(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  weightMassRunningOrderTotal(unitSystem: UnitSystem = METRIC): TechnicalFloatDataComponent
  wltpEnabled: Boolean
}

enum EnvironmentalDrivingCycle {
  City
  CityAer
  Combined
  Eudc
  ExtraHigh
  High
  Low
  Medium
  Total
  TotalAer
  TotalCd
  TotalWeighted
  Udc
  WeightedCombined
}

enum EnvironmentalIpf {
  High
  Low
  Regular
}

enum EnvironmentalMeasurement {
  Co2
  ElectricEnergyConsumption
  ElectricRange
  FuelConsumption
}

type errorMessage {
  errorCode: String
  errorDriveLineEFC: String
  errorEfficiencyClass: String
  errorEfficiencyClassBest: String
  errorEfficiencyClassWorst: String
}

"""Exception rule"""
type ExceptionRule {
  engineCodes: [String!]!
  fromStructureWeek: Float
  gearboxCodes: [String!]!
  modelCodes: [String!]!
  salesVersionCodes: [String!]!
  toStructureWeek: Float
}

"""
The views featuring the car's exterior in an outside location environment
"""
type ExteriorLocationViewGroup {
  """A view of the front of the car"""
  front: ImageGroup

  """All the exterior views"""
  images: [ImageSizes!] @deprecated(reason: "Use the named images instead e.g. front, threeQuartersFrontLeft, rear, left etc.")

  """A view of the left side of the car"""
  left: ImageGroup

  """A view of the rear of the car"""
  rear: ImageGroup

  """A view from the rear and left of the car"""
  rearLeft: ImageGroup

  """A view of the right side of the car"""
  right: ImageGroup

  """A three quarter's view of the front and left of the car"""
  threeQuartersFrontLeft: ImageGroup

  """A three quarter's view of the front and right of the car"""
  threeQuartersFrontRight: ImageGroup

  """A three quarter's view of the rear and left of the car"""
  threeQuartersRearLeft: ImageGroup

  """A three quarter's view of the rear and right of the car"""
  threeQuartersRearRight: ImageGroup

  """A three quarter's view from top of the front and left of the car"""
  topThreeQuartersFrontLeft: ImageGroup

  """A three quarter's view from top of the front and right of the car"""
  topThreeQuartersFrontRight: ImageGroup

  """A three quarter's view from top of the rear and left of the car"""
  topThreeQuartersRearLeft: ImageGroup
}

"""The exterior detail images of a car"""
type ExteriorStudioDetailsViewGroup {
  """A view of the car's grille"""
  grille: ImageGroup

  """A view of the car's headlights"""
  headlight: ImageGroup

  """A view of the car's rear window trim"""
  rearWindowTrim: ImageGroup

  """A view of the car's taillights"""
  taillight: ImageGroup

  """A view of the car's wheel"""
  wheel: ImageGroup
}

"""The views featuring the car's exterior in a studio environment"""
type ExteriorStudioViewGroup {
  """A view of the front of the car"""
  front: ImageGroup

  """A view of the left side of the car"""
  left: ImageGroup

  """A view of the rear of the car"""
  rear: ImageGroup

  """A view of the right side of the car"""
  right: ImageGroup

  """A three quarter's view of the front and left of the car"""
  threeQuartersFrontLeft: ImageGroup

  """A three quarter's view of the front and right of the car"""
  threeQuartersFrontRight: ImageGroup

  """A three quarter's view of the rear and left of the car"""
  threeQuartersRearLeft: ImageGroup

  """A three quarter's view of the rear and right of the car"""
  threeQuartersRearRight: ImageGroup
}

"""The views featuring the car's exterior"""
type ExteriorViewGroup {
  """The banner-view of a car"""
  banner: ImageGroup

  """The exterior detail views of a car"""
  details: ExteriorStudioDetailsViewGroup

  """
  The views featuring the car's exterior in an outside location environment
  """
  location: ExteriorLocationViewGroup

  """The standardized side-view of a car"""
  standardizedSideView: ImageGroup

  """The views featuring the car's exterior in a studio environment"""
  studio: ExteriorStudioViewGroup

  """
  The views featuring the car's exterior in a studio environment, proportionally sized relative to other models
  """
  studioProportional: ExteriorStudioViewGroup

  """The Top views of a car"""
  topView: TopViewViewGroup
}

type Feature {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): FeatureContent
  endWeek: String
  globalName: String
  nextWeek: String
  options: [String!]
  tags: [String!]
  type: CarComponentType
}

type FEATURE {
  """Feature code"""
  name: String

  """Short description of the feature"""
  displayName: String

  """Long description of the feature"""
  description: String

  """Image url of the feature"""
  image: String

  """Image url of the feature"""
  image1: String

  """Image url of the feature"""
  image2: String

  """Video url of the feature"""
  video1: String

  """Video url of the feature"""
  video2: String

  """Category channel of the feature"""
  CategoryChannel: [String!]

  """Visible flag for feature"""
  visible: Boolean

  """Component type id is a cpam component type"""
  componentTypeId: String
  highlightedFeatureSortOrder: Int
  _state: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PrismGenericContent
  globalName: String
  globalShortName: String
}

type FeatureContent {
  classification: ClassificationProperty
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  featureCode: String!
  image: ImageProperty
  matchingCode: String!
  meta: SystemMeta
  shortDescription: StringProperty
  video: VideoProperty
}

enum FILTER_COMPONENTS {
  Accessories
  LocalOptions
  AccessoriesAndLocalOptions
}

type FleetManagement {
  available: Boolean
}

type FORCED_BY {
  """Code of component which includes other component. For example package"""
  name: String

  """Short display name of the package"""
  displayName: String
  type: String
}

type FUEL_TYPE {
  """
  This holds the id/ unique string of respective type. For example: electric-petrol for fuel type
  """
  id: String

  """This holds the display name of the type"""
  displayName: String
}

enum FuelType {
  DIESEL
  PETROL
  PURE_ELECTRIC
}

"""Fuel Type Property"""
type FuelTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: FuelType
  valueDescription: String
}

"""Fuel types"""
type FuelTypes {
  diesel: FuelTypeProperty!
  petrol: FuelTypeProperty!
  pureElectric: FuelTypeProperty!
}

type Gearbox {
  code: String
  globalName: String
}

type GEARBOX {
  name: String
  uid: String
  text: String
  displayName: String
  engineDisplayName: String
  powerTrainTypeDisplayName: String
  description: String
  image1: String
  image2: String
  video1: String
  video2: String
  requiredChanges: REQUIRED_CHANGES
  transmissionType: String
  slug: String
  componentTypeId: String

  """Display Type"""
  displayType: COMPONENT_DISPLAY_TYPE
}

type GEARBOX_TYPE {
  """
  This holds the id/ unique string of respective type. For example: electric-petrol for fuel type
  """
  id: String

  """This holds the display name of the type"""
  displayName: String
}

type GlobalFeature {
  code: String!
  globalName: String
}

type GlobalNameException {
  carType: String!
  globalName: String!
}

type GlobalNameWithExceptions {
  exceptions: [GlobalNameException!]
  globalName: String!
}

type GroupableFeature {
  code: String
  description: [Description!]
  groupCode: String
  groupDescription: [Description!]
}

type GroupedCarList {
  cars: [Car!]!
  first: Car
  allGroupTypeCars: [Car!]!
  groupType: CarListGroupingType
  key: String!
  priceSummary(priceConfigInput: PriceConfigurationInput!): CarPriceSummary
  sortedOnPrice(priceConfigInput: PriceConfigurationInput, sortMissingPriceAs: NullSortingStrategy!): CarList!
  groupBy(
    filter: String
    groupType: CarListGroupingType

    """Deprecated, use 'groupType' instead"""
    type: String
  ): [GroupedCarList!]!
}

type HIGHLIGHT {
  """
  This field holds key of technical data such as wltp, nedc best and worst values of co2/ recharge types
  """
  key: String

  """
  This field holds value of technical data such as wltp, nedc best and worst values of co2/ recharge types
  """
  value: String

  """
  This field holds unit technical data such as wltp, nedc best and worst values of co2/ recharge types
  """
  unit: String

  """
  This field holds display name of technical data such as wltp, nedc best and worst values of co2/ recharge types
  """
  displayName: String
}

"""The icons for the different types of visualized features"""
type Icons {
  """The icon used for the color"""
  color: IconSizes

  """The icon used for the decor"""
  decor: IconSizes

  """The icon used for the gear shifter"""
  gearShift: IconSizes

  """The icon used for the seats/upholstery"""
  seat: IconSizes

  """The icon used for the steering wheel"""
  steeringWheel: IconSizes

  """The icon used for the wheel"""
  wheel: IconSizes
}

"""The different sizes available for each icon"""
type IconSizes {
  """The feature code being visualized"""
  code: String!

  """
  The default icon is guaranteed to always exist, and can be used as a fallback if the size requested isn't available for some reason.
  """
  default: Image!

  """The icon in a large size."""
  large: Image

  """The icon in the largest possible size."""
  maximum: Image

  """The icon in a medium size."""
  medium: Image

  """The icon in the smallest possible size."""
  minimum: Image

  """The icon in a small size."""
  small: Image
}

"""An image"""
type Image {
  """A key for this particular image"""
  key: String!

  """Image meta data"""
  meta: ImageMeta!

  """
  A url for an image with a transparent background, if available. Please keep in mind that generating transparent images puts more load on the service, so when possible please use the non-transparent URL.
  """
  transparentUrl: String

  """
  The url for the image. This url is not available for top-view components, please use transparentUrl
  """
  url: String
}

"""An image, available in different sizes"""
type ImageGroup {
  """A key for the image group"""
  key: String!

  """The different sizes available for each image in the group"""
  sizes: ImageSizes
}

"""Image metadata"""
type ImageMeta {
  """The aspect ratio of the image expressed as a floating point number"""
  aspectRatio: Float!

  """The height in pixels of the image"""
  height: Int!

  """The width in pixels of the image"""
  width: Int!
}

"""Image Property"""
type ImageProperty {
  """label describing value"""
  label: String
  mediaKey: String!
  mediaType: MediaType!
  url: String!
}

"""The different sizes available for an image"""
type ImageSizes {
  """
  The default image is guaranteed to always exist, and can be used as a fallback if the size requested isn't available for some reason.
  """
  default: Image!

  """The image in a large size"""
  large: Image

  """The image in the largest possible size"""
  maximum: Image

  """The image in a medium size"""
  medium: Image

  """The image in the smallest possible size"""
  minimum: Image

  """The image in a small size"""
  small: Image
}

type INTERIOR_ROOM {
  colorName: String!
  upholsteryName: String!
  features: [FEATURE!]
}

"""The views featuring the car's interior"""
type InteriorLocationViewGroup {
  """A view of the interior decor"""
  decor: ImageGroup

  """A driver's view of the interior of a car"""
  driversView: ImageGroup

  """A rear view of the interior of a car"""
  rear: ImageGroup

  """A view of the seats"""
  seat: ImageGroup

  """A view of the interior from the side"""
  side: ImageGroup
}

"""The views featuring the car's interior"""
type InteriorStudioViewGroup {
  """A view of the interior decor"""
  decor: ImageGroup

  """A driver's view of the interior of a car"""
  driversView: ImageGroup

  """A view of the gear shifter"""
  gearShift: ImageGroup

  """A rear view of the interior of a car"""
  rear: ImageGroup

  """A view of the seats"""
  seat: ImageGroup

  """A view of the seat's fabric/upholstery"""
  seatFabric: ImageGroup

  """A view of the interior from the side"""
  side: ImageGroup

  """A view of the steering wheel"""
  steeringWheel: ImageGroup
}

"""The views featuring the car's interior"""
type InteriorViewGroup {
  """The location visualizations featuring the car's interior"""
  location: InteriorLocationViewGroup

  """The studio visualizations featuring the car's interior"""
  studio: InteriorStudioViewGroup
}

type INTERSECTION_COL {
  name: String
  colorType: String
  displayName: String
  priceLow: Int
  priceHigh: Int
  type: String
  medias: [INTERSECTION_MEDIA]
}

type INTERSECTION_DATA {
  COL: [INTERSECTION_COL]
  UPH: [INTERSECTION_UPH]
}

type INTERSECTION_MEDIA {
  url: String
}

type INTERSECTION_UPH {
  name: String
  displayName: String
  priceLow: Int
  priceHigh: Int
  type: String
  medias: [INTERSECTION_MEDIA]
}

"""Int Property"""
type IntProperty {
  """value formatted for display according to market setting"""
  formatted: String

  """label describing value"""
  label: String

  """describing which unit the value has"""
  unit: String
  value: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LINE_ITEM {
  """Name of the line item"""
  name: String

  """Price of the item"""
  price: Float

  """Price with currency and rounded"""
  displayPrice: String

  """Type of line item"""
  type: String

  """Pretax price"""
  pretax: Float

  """Pretax price with currency and rounded"""
  pretaxDisplayPrice: String

  """VAT amount"""
  vatAmount: Float

  """VAT Amount with currency and rounded"""
  vatAmountDisplayPrice: String
}

type LOCALE_ENTRY {
  locale: String
  default: Boolean
}

type Location {
  lat: Float
  lon: Float
}

type Market {
  currentSpecificationMarketCode: String
  marketCode: String
  marketingCode: GroupableFeature
  originSpecificationMarketCode: String
}

type MARKET_CONFIGURATION {
  id: String!
  name: String
  locales: [String!]!
  specMarkets: [String!]!
}

type MARKET_CONFIGURATION_BY_ID {
  id: String!
  market: MARKET_CONFIGURATION!
}

type MARKET_CONFIGURATIONS {
  markets: [MARKET_CONFIGURATION!]
}

type MarketConfiguration {
  marketConfigurationKey: MarketConfigurationKey!
}

"""Represents a market configuration"""
scalar MarketConfigurationKey

type MarketConfigurationList {
  all: [MarketConfiguration!]!
  cars: CarList!
  client: String!
  current: MarketConfiguration
  market: String!
  offers: [OfferList!]!
  salesModel: String
}

type MARKETING_CODE {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: MARKETING_CODE_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
}

type MARKETING_CODE_DISPLAY_TYPE {
  key: String
  name: String
}

type MarketingCode {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!

  """Content carries localized information about the component."""
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarComponentContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type MATERIAL {
  name: String
  slug: String
  sort: Int
}

enum MEASUREMENT {
  co2
  co2IpfHigh
  co2IpfHighLow
  co2IpfLow
  co2IpfLowHigh
  fuelConsumption
  fuelConsumptionIpfHigh
  fuelConsumptionIpfHighLow
  fuelConsumptionIpfLow
  fuelConsumptionIpfLowHigh
  electricRange
  electricRangeIpfHigh
  electricRangeIpfHighLow
  electricRangeIpfLow
  electricRangeIpfLowHigh
  electricEnergyConsumption
  electricEnergyConsumptionIpfHigh
  electricEnergyConsumptionIpfHighLow
  electricEnergyConsumptionIpfLow
  electricEnergyConsumptionIpfLowHigh
}

type MEDIA {
  """View group name such as interior, exterior etc"""
  viewGroup: String

  """Display name of item - eg sideView or default"""
  viewName: String

  """Angle of the image"""
  angle: Int

  """Zoom if available, 'default' used as default value"""
  zoom: String

  """Image url"""
  url: String
}

type MEDIA_SETTING {
  """Exterior media settings"""
  exterior: [MEDIA!]

  """Interior media settings"""
  interior: [MEDIA!]
}

type MEDIAS {
  """This is not used in starting point query"""
  pno34: String

  """This is not used in starting point query"""
  language: String

  """This is not used in starting point query"""
  structureWeek: Int

  """This is not used in starting point query"""
  featureCodes: [String]

  """
  Provides the image url, angle and other media information of exterior realistic
  """
  exteriorRealistic: [MEDIA!]

  """
  Provides the image url, angle and other media information of interior realistic
  """
  interiorRealistic: [MEDIA!]

  """
  Provides the image url, angle and other media information of side model page
  """
  sideModelpage: [MEDIA!]

  """Provides the image url, angle and other media information of exterior"""
  exterior: [MEDIA!]

  """Provides the image url, angle and other media information of interior"""
  interior: [MEDIA!]

  """Views provides the image urls of various views of a car image"""
  views: MEDIAVIEW!

  """Provides the image url, angle and other media information of wheel"""
  wheel: [MEDIA!]

  """
  Provides the image url, angle and other media information of trim group
  """
  trimGroup: [MEDIA!]

  """Provides the image url, angle and other media information of seating"""
  seating: [MEDIA!]

  """Provides the image url, angle and other media information of color"""
  color: [MEDIA!]

  """Provides interior and exterior media details in desired angle"""
  studio: MEDIA_SETTING!

  """Provides interior and exterior media details in desired angle"""
  location: MEDIA_SETTING!
  tyreLabels: [TYRE_LABEL_MEDIA!]

  """
  Provides the image url, angle and other media information of exterior, proportionally sized
  """
  exteriorProportional: [MEDIA!]
}

enum MediaType {
  DOCUMENT
  IMAGE
  VIDEO
}

type MEDIAVIEW {
  """Provides image url, angle and other media information of back view"""
  back: MEDIA

  """Provides image url, angle and other media information of front view"""
  front: MEDIA

  """
  Provides image url, angle and other media information of side right view
  """
  sideRight: MEDIA

  """
  Provides image url, angle and other media information of side left view
  """
  sideLeft: MEDIA

  """
  Provides image url, angle and other media information of three quarters front left view
  """
  threeQuartersFrontLeft: MEDIA

  """
  Provides image url, angle and other media information of three quarters front right view
  """
  threeQuartersFrontRight: MEDIA

  """
  Provides image url, angle and other media information of three quarters back left view
  """
  threeQuartersBackLeft: MEDIA

  """
  Provides image url, angle and other media information of three quarters back right view
  """
  threeQuartersBackRight: MEDIA

  """
  Provides image url, angle and other media information of dashboard view
  """
  dashboard: MEDIA

  """Provides image url, angle and other media information of seats view"""
  seats: MEDIA

  """
  Provides image url, angle and other media information of seats side view
  """
  seatsSide: MEDIA

  """Provides image url, angle and other media information of wheels view"""
  wheel: MEDIA

  """
  Provides image url, angle and other media information of wheels detailed view
  """
  wheelDetailed: MEDIA

  """
  Provides image url, angle and other media information of side model page view
  """
  sideModelPage: MEDIA

  """
  Provides image url, angle and other media information of the tail light view
  """
  taillight: MEDIA

  """
  Provides image url, angle and other media information of the rear window trim view
  """
  rearWindowTrim: MEDIA

  """
  Provides image url, angle and other media information of instrumental panel view
  """
  instrumentPanel: MEDIA

  """
  Provides image url, angle and other media information of center display view
  """
  centerDisplay: MEDIA

  """
  Provides image url, angle and other media information of steering wheel view
  """
  steeringWheel: MEDIA

  """
  Provides image url, angle and other media information of the gear shifte viewr
  """
  gearShift: MEDIA

  """
  Provides image url, angle and other media information of the headlight view
  """
  headlight: MEDIA

  """Provides image url, angle and other media information of grille view"""
  grill: MEDIA

  """
  Provides image url, angle and other media information of front rim view
  """
  frontRim: MEDIA
  seatView: MEDIA

  """
  Provides image url, angle and other media information of the seat fabric view
  """
  seatFabric: MEDIA
  decoView: MEDIA

  """Provides image url, angle and other media information of top-down view"""
  topView: MEDIA
}

type Metadata {
  returnedHits: Int!
  totalHits: Int!
}

type Model {
  code: String
  description: [Description!]
  modelCategory: String
  modelFamily: String
}

type MODEL_FAMILY {
  name: String
  description: String
  displayName: String
}

"""Model categories"""
type ModelCategories {
  crossover: ModelTypeCategoryProperty!
  estate: ModelTypeCategoryProperty!
  sedan: ModelTypeCategoryProperty!
  suv: ModelTypeCategoryProperty!
}

enum ModelCategory {
  CROSSOVER
  ESTATE
  SEDAN
  SUV
}

"""Model Category Property"""
type ModelTypeCategoryProperty {
  enumDescription: String
  formatted: String
  label: String
  value: ModelCategory!
  valueDescription: String
}

type Mutation {
  flushGpeCache(country: String, modelYear: Float, pno12: String): PriceCacheFlushResult!
  flushPriceOutputCache(locale: String, modelYear: Float, pno3: String, pno12: String): PriceCacheFlushResult!
  flushCasApiCache(endpoint: CasEndPoints!, modelYear: String, pno3: String, structureWeek: String): CasApiCacheFlushResult!
}

type Nedc {
  co2Unit: String
  combinedCo2: Float
  electricEnergyConsumption: Float
  electricEnergyConsumptionUnit: String
  electricRange: Float
  electricRangeUnit: String
  exurbanFuelConsumption: Float
  exurbanFuelConsumptionUnit: String
  fuelConsumption: Float
  fuelConsumptionUnit: String
  isOfficial: Boolean
  urbanFuelConsumption: Float
  urbanFuelConsumptionUnit: String
  weightedCombinedCo2: Float
  weightedCombinedFuelConsumption: Float
}

"""How to sort null values"""
enum NullSortingStrategy {
  PlaceFirst
  PlaceLast
  Remove
}

type OfferList {
  cars: CarList!
  offerKey: JSON!
}

type OPT {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: OPT_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): OptionContent
  globalName: String
  globalShortName: String
}

type OPT_DISPLAY_TYPE {
  key: String
  name: String
}

type Option {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): OptionContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type OptionContent implements CarComponentContent {
  classification: ClassificationProperty
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  matchingCode: String!
  meta: SystemMeta
  optionCode: String!
  shortDescription: StringProperty
  video: VideoProperty
}

"""
The type of option, reflecting where in the pipeline it is added to the car
"""
enum OptionType {
  ACCESSORY
  LOCAL_OPTION
  OPTION
}

type Order {
  availableForUnconsentedTrade: Boolean
  brandOccurenceDateTime: [BrandOccurenceDateTime!]
  brandStatusPoint: Int
  commonOrderNumber: String
  commonOrderType: Int
  commonSalesType: String
  commonStatusPoint: Int
  customerOrderReferenceNumber: String
  dealerOrderNumber: String
  deliveryDate: String
  destinationCode: String
  distributorId: String
  estimatedCustomerDeliveryDate: String
  estimatedCustomerDeliveryLeadTime: Float
  estimatedCustomerDeliveryLeadTimeUnit: String
  factoryCompleteDate: String
  fyon: String
  intermediateDestination: String
  lastDayForSpecChange: String
  pendingTransfer: Boolean
  preliminaryReservation: VistaReservation
  visibilityIndicator: Boolean
}

type OVERVIEW {
  """This field is not used"""
  parameters: OVERVIEW_WITH_CIS

  """Policy validation"""
  validation: VALIDATION

  """This field is not used"""
  validatedParameters: OVERVIEW_WITH_CIS

  """This field is not used"""
  price: String

  """This field is not used"""
  requiredChanges(NAME: String!, TYPE: String!): REQUIRED_CHANGES

  """This field is not used"""
  co2: CO2

  """
  This field holds the inerior and exterior image urls whatever received from CAS
  """
  media: MEDIAS

  """
  This field holds pricing details such as price, payment method, pricelist etc.
  For more details about pricing strategy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING!]

  """This field is not used"""
  modelFamily: String

  """Short description of the starting point - For example XC90-Inscription"""
  displayName: String

  """Energy efficiency of the vehicle with best, worst and range etc."""
  energyEfficiency: ENERGY_EFFICIENCY

  """Short token that holds configuration"""
  encodedState: String

  """This provides the summary information of configuration data"""
  decodedState: CAR_CONFIGURATION

  """Pno34 + Options as a string"""
  pno34PlusOptions: String

  """
  This contains the offers data for dcom sales model that are received from pricing app - dcom offers api
  """
  salesModelUsp: [SALES_MODEL_USP!]

  """
  This contains uspPattern defined in global meta data for sales version family
  """
  usp: [String!]

  """Fuel type details of the vehicle"""
  fuelType: FUEL_TYPE

  """Gearbox type of the vehicle"""
  gearboxType: GEARBOX_TYPE

  """Drive type of the vehicle"""
  driveType: DRIVE_TYPE

  """Engine type of the vehicle"""
  engineType: ENGINE_TYPE

  """
  State holds the state of a configuration, like car token etc
  For more details about state, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/State.aspx
  """
  state: STATE

  """
  This field holds various price details such as pretax, taxes, vat, price breakdown etc
  For more details about pricing details, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/Pricing-details.aspx
  """
  pricingDetails: PRICING_DETAILS

  """
  This field holds various price details for the starting point of this configuration, such as pretax, taxes, vat, price breakdown etc.
  This is also commonly known as the base price, with prices based on the color and upholstery, 
  as well as no added packages and options, for the starting point of this configuration.
  The starting point price will include pricing details for PNO12s with 100 percent options/packages.
  """
  startingPointPricingDetails: PRICING_DETAILS

  """
  Gives the price breakdown at each component level
  For more details about price break down, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/Price.aspx
  """
  priceBreakdown: PRICE_BREAKDOWN
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  priceComparison(priceConfigInput: CchPriceConfigurationInput): CompareTwoCarPrices
  priceSummary(priceConfigInput: CchPriceConfigurationInput): CarPriceSummary
  details(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarDetails @deprecated(reason: "Use `car.content` on the root instead (for example `car.colour.content`)")
}

type OVERVIEW_WITH_CIS {
  cil: [COMPONENT!]
  cis: String
}

type OWNERSHIP_TAX_ENTRY {
  """First month amount - Need to check"""
  firstMonthAmount: Float

  """Name of the tax entry"""
  name: String
}

type Package {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PackageContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type PACKAGE {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: PACKAGE_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PackageContent
  globalName: String
  globalShortName: String
}

type PACKAGE_DISPLAY_TYPE {
  key: String
  name: String
}

type PackageableFeature {
  code: String
  description: [Description!]
  groupCode: String
  groupDescription: [Description!]
  packages: [String!]
}

type PackageContent implements CarComponentContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  meta: SystemMeta
  packageCode: String!
  shortDescription: StringProperty
  video: VideoProperty
}

"""Unapplied Package exceptions"""
type PackageException {
  content: EnrichedPackageContent!
  rule: ExceptionRule!
}

type PARAMETER {
  """Contract length or Mileage for subscription"""
  default: Int

  """Prices based on contract length or mileage"""
  values: [PARAMETER_VALUE]
}

type PARAMETER_VALUE {
  """Parameter ID"""
  parameter: Int

  """Display name of parameter"""
  displayParameter: String

  """Price of parameter"""
  price: Float

  """Price with currency and rounded"""
  displayPrice: String

  """Relative price"""
  relativePrice: Float

  """Relative price with currency and rounded"""
  relativeDisplayPrice: String
}

type PART_OF {
  """
  Code of component which is part of other component. For example package
  """
  name: String

  """Short display name of the package"""
  displayName: String
  type: String
  selected: Boolean
  _state: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PrismGenericContent
}

type PARTNER_CONFIGURATION {
  """Holds brand - VCC or POL"""
  brand: String!

  """Holds spec market"""
  specMarket: String!

  """Holds ISO standard country code"""
  countryCode: String!

  """Holds partner code"""
  partner: String!

  """Holds active policies of brand + market + country code and partner"""
  policy: String
}

input PARTNER_CONFIGURATION_INPUT {
  """Contains key like programMarket, brand, countryCode and partner"""
  key: String

  """Contains value of respective key"""
  value: String
}

type PARTNER_CONFIGURATION_QUERY {
  """
  This fields holds the active policies of partner and other market information passed in request
  """
  configuration: PARTNER_CONFIGURATION
}

enum PaymentMethod {
  direct
  monthly
}

type Pno {
  pno12: String!
  pno34: String!
  pno34PlusOptions: String!
  pno34PlusOptionsWithoutAccessories: String!
}

input PNO_TRANSFER_INPUT {
  """Standard PNO12"""
  pno12: String!

  """The edition option code is only applicable for editions cars"""
  editionOptionCode: String
}

type Pno12 {
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String
  ): Pno12Content
}

type PNO12 {
  pno12: String
}

type Pno12Content {
  displayName: String
  priceListDisplayName: String
}

type PowerTrain {
  driveTrain: DriveTrain
  engine: CLEEngine
}

type PRECONFIG {
  """Holds the preconfiguration name"""
  name: String!

  """Holds car type of preconfig"""
  carType: String!

  """Holds model year of preconfig"""
  modelYear: String!

  """Holds token data"""
  state: TokenState!

  """Holds components that are added on preconfig"""
  componentsAdded: [COMPONENT]

  """Holds components that are removed on preconfig"""
  componentsRemoved: [COMPONENT]
}

type PRECONFIGURATION {
  """Contains Spec market code"""
  programMarket: String!

  """Contains policy id"""
  policy: String!

  """Hold the list of preconfigurations"""
  preconfigs: [PRECONFIG]
}

type PRECONFIGURATION_QUERY {
  """
  This fields holds the active policies of partner and other market information passed in request
  """
  configuration: PRECONFIGURATION
}

type Price {
  msrpAmount: Float
  preTaxAmount: Float
  priceDate: String
  subscriptionPrice: SubscriptionPrice
  taxAmount: Float
  taxationDate: String
}

type PRICE_BREAKDOWN {
  """Price difference amount"""
  diff: Float

  """Price Amount without difference"""
  priceWithoutDiff: Float

  """Price difference with currency and rounded"""
  displayPriceDiff: String

  """Price without difference with currency and rounded"""
  displayPriceWithoutDiff: String

  """Price breakdown of color component"""
  color: PRICE_BREAKDOWN_COMPONENT

  """Price breakdown of upholstery component"""
  upholstery: PRICE_BREAKDOWN_COMPONENT

  """Price breakdown of package component"""
  packages: [PRICE_BREAKDOWN_COMPONENT!]

  """Price breakdown ofoptions component"""
  options: [PRICE_BREAKDOWN_COMPONENT!]
}

type PRICE_BREAKDOWN_COMPONENT {
  """ID of component"""
  name: String

  """Name of the component"""
  displayName: String

  """Type of the component such as color, upholstery, packages, options etc"""
  type: String

  """Price before tax"""
  pretax: Float

  """Price before tax with currency and rounded"""
  displayPretaxPrice: String

  """Price including tax"""
  price: Float

  """Price including tax with currency and rounded"""
  displayPrice: String
}

type PRICE_CONFIGURATION {
  name: String
  active: Boolean
  variableReferences: [PRICE_CONFIGURATION_VARIABLE_REF!]
  variableValues: [PRICE_CONFIGURATION_VALUE!]
}

input PRICE_CONFIGURATION_DATE_INPUT {
  """This field holds the model year of the car"""
  modelYear: String

  """This field holds the pno3 or carType"""
  carType: String

  """
  This field holds the taxationDate (the date the tax calculation is based on)
  """
  date: String
}

type PRICE_CONFIGURATION_DICT {
  key: String
  value: String
}

input PRICE_CONFIGURATION_INPUT {
  """
  This holds the name of the pricing type: default, sub, sub_fixed, no prices. Follow this link ... for more details.
  """
  name: String

  """
  User can ask for other taxation dates from URAX by passing in what date you would like per PNO3 + ModelYear of the car
  """
  taxation: [PRICE_CONFIGURATION_TAXATION_INPUT!]

  """
  This is where you pass variables for sub and sub_fixed to CCE. 
  All of the values will default to what Financial Options has as default value if it's not defined.
  """
  variableReferences: [PRICE_CONFIGURATION_VARIABLE_REFERENCE_INPUT!]

  """
  How prices should be rounded, and if they are rounded. Defaults to always round. This only applies to displayPrices
  """
  roundingStrategy: ROUNDING_STRATEGY = alwaysRound

  """
  User can ask for other pricing dates from date you would like per PNO3 + ModelYear of the car
  """
  priceDates: [PRICE_CONFIGURATION_DATE_INPUT!]
}

type PRICE_CONFIGURATION_OUTPUT {
  """Name of price configuration"""
  name: String

  """Taxation data of configuration"""
  taxation: [PRICE_CONFIGURATION_TAXATION_OUTPUT!]

  """Variable references"""
  variableReferences: [PRICE_CONFIGURATION_VARIABLE_REFERENCE_OUTPUT!]
}

type PRICE_CONFIGURATION_QUERY {
  priceConfigurations: [PRICE_CONFIGURATION!]
  virtualPriceLists: [VIIRTUAL_PRICE_LIST!]
}

input PRICE_CONFIGURATION_TAXATION_INPUT {
  """This field holds the model year of the car"""
  modelYear: String

  """This field holds the pno3 or carType"""
  carType: String

  """
  This field holds the taxationDate (the date the tax calculation is based on)
  """
  date: String
}

type PRICE_CONFIGURATION_TAXATION_OUTPUT {
  """Model year"""
  modelYear: String

  """Car type or pno3"""
  carType: String

  """Taxation date"""
  date: String
}

type PRICE_CONFIGURATION_VALUE {
  key: String
  values: [String!]
}

type PRICE_CONFIGURATION_VARIABLE_REF {
  name: String
  value: String
}

input PRICE_CONFIGURATION_VARIABLE_REFERENCE_INPUT {
  """This holds the key such as i, customerType, contractLength """
  name: String

  """
  This hold the value of respecive keys 
  - Mileage in number for key i,  
  - b2b or b2c for customerType 
  - number of months for contractLength
  """
  value: String
}

type PRICE_CONFIGURATION_VARIABLE_REFERENCE_OUTPUT {
  """This holds the key such as i, customerType, contractLength """
  name: String

  """
  This hold the value of respecive keys - Mileage in miles for i, b2b or b2c for customerType and number of months for contractLength
  """
  value: String
}

type PRICE_DATA {
  """Component price with VAT included"""
  listPrice: Float

  """MSRP of the component/ configuration"""
  msrp: Float

  """Pretax of the component/ configuration"""
  pretax: Float

  """MSRP price with currency and rounded"""
  msrpDisplayPrice: String

  """Pretax price with currency and rounded"""
  pretaxDisplayPrice: String

  """Display price with currency and rounded"""
  displayListPrice: String

  """Relative base price"""
  relativeBasePrice: Float

  """Relative base price with currency and rounded"""
  displayRelativeBasePrice: String

  """Price before discount"""
  beforeDiscount: Float

  """Price before discount with currency and rounded"""
  beforeDiscountDisplayPrice: String

  """Currency"""
  currency: String

  """Payment method - Unit of pricing"""
  paymentMethod: String

  """Pretax relative base price"""
  relativePretaxBasePrice: Float

  """Pretax relative base price with currency and rounded"""
  relativePretaxBaseDisplayPrice: String

  """Component pretax price"""
  listPretaxPrice: Float

  """Component pretax price with currency and rounded"""
  listPretaxDisplayPrice: String
}

type PRICE_DETAIL_ITEM {
  """This is for dueToday. Holds string 'dueToday'"""
  name: String

  """This is for dueToday. Holds string 'dueToday'"""
  displayName: String

  """This is not used"""
  type: String

  """Checkout gross price"""
  price: Float

  """Checkout gross price with currency and rounded"""
  displayPrice: String

  """Checkout net price"""
  pretax: Float

  """Checkout net price with currency and rounded"""
  pretaxDisplayPrice: String

  """Checkout VAT Amount"""
  vatAmount: Float

  """Checkout VAT Amount with currency and rounded"""
  vatAmountDisplayPrice: String
}

type PRICE_SETTING {
  name: String
  value: String
}

type PRICE_STRATEGY {
  salesVersion: PRICE_STRATEGY_SETTING
  driveLine: PRICE_STRATEGY_SETTING
  components: PRICE_STRATEGY_COMPONENTS
  seats: PRICE_STRATEGY_SETTING
}

type PRICE_STRATEGY_COMPONENTS {
  options: PRICE_STRATEGY_SETTING
  packages: PRICE_STRATEGY_SETTING
  upholsteries: PRICE_STRATEGY_SETTING
  colors: PRICE_STRATEGY_SETTING
}

enum PRICE_STRATEGY_SETTING {
  relativePrice
  relativeBasePrice
  absolutePrice
  listPrice
  price
  requiredChangesPrice
  listPretaxPrice
  relativePretaxBasePrice
  requiredChangesPretaxPrice
  relativeBasePriceSplitTax
  requiredChangesPriceSplitTax
}

type PriceAmount {
  """The 'raw' price amount."""
  amount: Float
  amountDisplayed: Boolean

  """The currency used to format the price in the "display" field"""
  currency: String

  """The display price of the price amount."""
  display: String
  includingVat: Boolean!
  selector: String
  source: String!

  """The amount of tax, if available."""
  taxAmount: Float
}

type PriceCacheFlushResult {
  count: Float!
  pattern: String!
}

input PriceConfigurationInput {
  """The chosen contract length for monthly SalesModels."""
  contractLength: Float
  locale: String!

  """The chosen mileage for monthly SalesModels."""
  mileage: Float
  name: String!
  priceDates: [TaxationInput!]
  roundingStrategy: RoundingStrategy = alwaysRound
  taxation: [TaxationInput!]
  variableReferences: [VariableReference!] = []
}

type PriceMileageUnit {
  display: String

  """The 'raw' unit"""
  unit: String

  """The unit of measure"""
  uom: String

  """The 'raw' unit value"""
  value: Float
}

type PRICING {
  """Currency of the configuration"""
  currency: String

  """Display currency of configuration"""
  displayCurrency: String

  """Price of configuration"""
  price: Float

  """This is not used in starting point query"""
  listPrice: Float

  """Relative price of configuration"""
  relativePrice: Float

  """Relative base price of configuration"""
  relativeBasePrice: Float

  """Price of configuration"""
  value: Float

  """Price with currency and rounded"""
  displayPrice: String

  """Relative price with currency and rounded"""
  relativeDisplayPrice: String

  """Relative base price with currency and rounded"""
  relativeBaseDisplayPrice: String

  """Benefit in kind - Informational tax delta value"""
  benefitInKind: Float

  """Benefit in kind price with currency and rounded"""
  benefitInKindDisplayPrice: String

  """Payment method - direct or monthly"""
  paymentMethod: PaymentMethod

  """Holds the indididual component prices"""
  componentPrices: [COMPONENT_PRICE!]

  """Pricelist"""
  priceList: String!

  """Contract duration in months for CbV"""
  contractDurationInMonths: Int

  """Contract max driving distance in kilo meters"""
  contractMaxDrivingDistanceKm: Int

  """Contract type"""
  contractType: String

  """Customer type - b2b or b2c"""
  customerType: String

  """Pretax price"""
  pretax: Float

  """Pretax price with currency and rounded"""
  pretaxDisplayPrice: String
}

type PRICING_DETAILS {
  """This gives display name of price type from financial options"""
  name: String

  """This gives description of price type from financial options"""
  description: String

  """Price of the request"""
  price: Float

  """Price calculated from URAX for configuration (with tax)"""
  msrp: Float

  """Display MSRP with currency and rounded"""
  msrpDisplayPrice: String

  """Price calculated from URAX for configuration (exlc VAT tax)"""
  msrpExcludingVat: Float

  """Display MSRP excluding Vat with currency and rounded"""
  msrpExcludingVatDisplayPrice: String
  pretaxMsrp: Float
  pretaxMsrpDisplayPrice: String

  """Price from GPE of configuration (price before tax)"""
  pretax: Float

  """Display Pretax price with currency and rounded"""
  pretaxDisplayPrice: String

  """VAT Amount received from URAX"""
  vatAmount: Float

  """Display VAT amount with currency"""
  vatAmountDisplayPrice: String

  """This shows the difference of MSRP and Pretax"""
  pretaxMsrpDelta: Float

  """Pretax to MSRP difference amount with currency"""
  pretaxMsrpDeltaDisplayPrice: String

  """netTaxAmount"""
  netTaxAmount: Float

  """netTaxAmount display price"""
  netTaxAmountDisplayPrice: String

  """grossTaxAmount"""
  grossTaxAmount: Float

  """grossTaxAmount display price"""
  grossTaxAmountDisplayPrice: String

  """Display price with currency"""
  displayPrice: String

  """Relative price of configuration"""
  relativePrice: Float

  """Relative price with currency"""
  relativeDisplayPrice: String

  """Contains price details"""
  details: PRICING_DETAILS_DETAILS

  """Acquisition tax details received from URAX"""
  acquisitionTaxes: [PRICING_TAX_ENTRY]

  """Informational tax details received from URAX"""
  informationalTaxes: [PRICING_TAX_ENTRY]

  """Ownership tax details received from URAX"""
  ownershipTaxes: [PRICING_TAX_ENTRY]

  """Line item received from Financial Options/ PricingApp"""
  lineItems: [LINE_ITEM]

  """VAT Position received from URAX"""
  vatPositionTotals: [VAT_POSITION_TOTAL]

  """
  Mileage - buckets from financial options, including relative prices if selected. If not set in query default is used
  """
  mileage: PARAMETER

  """
  Contract length buckets from financial options, including relative prices if selected. If not set in query default is used
  """
  contractLength: PARAMETER

  """This give price break down details of configuration selected"""
  priceBreakdown: PRICE_BREAKDOWN
  dueToday: PRICE_DETAIL_ITEM

  """Price inclusive VAT, check price if you need price without VAT"""
  priceIncVat: Float

  """This is the display formatted price of priceIncVat"""
  priceIncVatDisplayPrice: String
}

type PRICING_DETAILS_DETAILS {
  """After VAT taxes amount"""
  afterVatTaxesAmount: Float

  """Before VAT taxes amount"""
  beforeVatTaxesAmount: Float

  """Car configuration net price"""
  carConfigNetPrice: Float

  """Currency"""
  currency: String

  """Features net price"""
  featuresNetPrice: Float

  """Offers monthly cost"""
  offersMonthlyCost: Float

  """Prepayment amount"""
  prepaymentAmount: Float

  """Price exceeded mileage"""
  priceExceededMileage: Float

  """Total cost excluding VAT"""
  totalCostExclVat: Float

  """Total cost including VAT"""
  totalCostInclVat: Float

  """Variant gross price"""
  variantGrossPrice: Float

  """Variant net price"""
  variantNetPrice: Float

  """VAT Rate"""
  vatRate: Float
}

type PRICING_TAX_ENTRY {
  """Amount of acquisition tax or informational tax"""
  amount: Float

  """Name of tax. For example: Moms"""
  name: String

  """Unique Tax ID defined for Tax in URAX"""
  taxId: String

  """Tax version ID"""
  taxVersionId: String

  """VAT Position"""
  vatPosition: String

  """Rate % of VAT"""
  vatRate: String

  """Display price with currency and rounded"""
  displayPrice: String

  """Type of tax - for example: default"""
  type: String
  tags: [String]

  """Frequency of the tax"""
  frequency: String
}

"""Enriched Information"""
type PrismCarInformation {
  carTypes: [EnrichedCarType!]!
  categories: EnrichedCategoryNode!
  colors: [EnrichedColour!]!
  colours: [EnrichedColour!]! @deprecated(reason: "Use `colors` instead")
  components: [EnrichedComponent!]!
  drivelines: [EnrichedDriveline!]!
  engines: [EnrichedEngine!]!
  enums: Enums!
  packages: [EnrichedPackage!]!
  pno12s: [EnrichedPno12!]!
  salesLevels: [EnrichedSalesLevel!]!
  upholsteries: [EnrichedUpholstery!]!
  wheels: [EnrichedWheel!]!
}

"""Generic Prism content"""
type PrismGenericContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  shortDescription: StringProperty
  video: VideoProperty
}

"""Prism Information"""
type PrismInfo {
  carInformation: PrismCarInformation!
}

type Query {
  """
  ### [Assortment](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIhx1QQAZlTJpxjUYfenGEKm9TvyCYhiC0vQUAEwgAL5AA&referrer=operation_collections&variant=staging)
  Returns the entire assortment.
  """
  assortment(carType: String, configurationWindow: ConfigurationWindow = Current, engine: String, gearbox: String, modelYear: Float!, policy: String!, salesVersion: String, structureWeek: Float): Assortment!

  """
  ### [Car By Token](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIhBg6uIBMLOHDb1BPPg-rsm1OOws1O4ADBy0cA7iEIIgAL5AA&referrer=operation_collections&variant=staging)
  
  The provided token can (currently) be one of the following: `[short, long, userFriendly]`. 
  Tokens are fetch through configuration, see **[link](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIhBTQTGlMADOw60mcPoKfS29CDCSTNQATBRM4qwcIRIgAL5AA&referrer=operation_collections&variant=staging)** for more information how to fetch tokens.
  """
  carByToken(
    configurationWindow: ConfigurationWindow = Current

    """A short or long token."""
    token: String
  ): Car!

  """
  ### [Car Configuration By Specification](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIgWGGC1pwATNLYAGaoPp8n9dvQw4YRcYGQo3aQgmDggQAF8gA&referrer=operation_collections&variant=staging)
  Get the configuration of a car, by providing a rough approximation of a car. The omitted fields will be filled in by [backend] in order to provide a valid Car.
  """
  carConfigurationBySpecification(client: String, policy: String!, selectionStrategy: ConfigurationSelectionStrategy, specification: CarConfigurationSpecification!): CarConfiguration!

  """
  ### [Cars By Policy](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIh4GfoIAMAJhH1BkiuJgw2zOPSkIQRY4ChZxRmoSAF8gA&referrer=operation_collections&variant=staging)
  
  Returns a list of cars that are available for a given policy.
  """
  carsByPolicy(
    """A configuration policy"""
    policy: String
    structureWeek: Int
    structureWeekFrom: Int
    structureWeekTo: Int
  ): CarList!

  """
  ## [Pre-Configured cars by policy](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIh6-OAAY4TYeLEY%2B1CtTbOYveUz23HAsgbQATCAAvkA&referrer=operation_collections&variant=staging)
  Returns pre-configured cars for a given policy.
  """
  preConfiguredCarsByPolicy(policy: String!): CarList!
  stockCarConfigurationQuery(DUPLICATES_IDENTIFIER: String!, CLE_CAR_TYPE: CLE_CAR_TYPE!, LOCALE: String, PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT): STOCK_CAR_CONFIGURATION_QUERY @deprecated(reason: "Old CCH Query, without replacement.")
  conditionFilterQuery(
    """
    This holds policy id, the last filter that has the possibility of limiting the offer of the NSC/ Partner etc.
    For more details about policy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Policys-(CCE).aspx
    """
    POLICY: String
    SERVICEID: String
    CONDITIONS: [CONDITION_FILTER_IN_PARAMETER_IN]

    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT
  ): CONDITION_FILTER @deprecated(reason: "Old CCH Query, without replacement.")

  """
   This query gives all the possible configurations of a CCE-policy enriched with tons of metadata. 
  The query supports endless of user journey 
  
  For more details about starting point query, please refer this link : 
  https://intranet.volvocars.net/sites/CCH/SitePages/startingPointQuery.aspx
  """
  startingpointQuery(
    """
    This holds policy id, the last filter that has the possibility of limiting the offer of the NSC/ Partner etc.
    For more details about policy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Policys-(CCE).aspx
    """
    POLICY: String

    """This field is not used in starting point query"""
    PRICE_LIST: String

    """This field is not used in starting point query"""
    PRICE_CONFIG: String

    """
    Language is combination of ISO 639-1 langugage code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden.
    For more details about language, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LANGUAGE: String

    """
    Locale is combination of ISO 639-1 langugage code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden
    For more details about locale, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LOCALE: String

    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT

    """
    Channel is an optional field which holds 'CBV' for CbV requests, and 'DEFAULT' for all others
    """
    CHANNEL: CHANNEL

    """
    Provide a STRUCTURE_WEEK argument if you want to return PNO12:s surrounding the given structure week. 
    If no STRUCTURE_WEEK is provided the closest structure week based on the current date and time will be used.
    """
    STRUCTURE_WEEK: Int

    """
    Use the STRUCTURE_WEEK_FROM argument if you want to explicitly return PNO12:s of the given structure week and future structure weeks. 
    STRUCTURE_WEEK_FROM can be used in combination with the STRUCTURE_WEEK_TO argument to get PNO12:s which are in the defined span.
    """
    STRUCTURE_WEEK_FROM: Int

    """
    Use the STRUCTURE_WEEK_TO argument if you want to explicitly return PNO12:s up until the given structure week. 
    STRUCTURE_WEEK_TO can be used in combination with the STRUCTURE_WEEK_FROM argument to get PNO12:s which are in the defined span.
    """
    STRUCTURE_WEEK_TO: Int

    """
    Holds client name of the requested system. For VISTA, it should hold vista
    """
    CLIENT: String
  ): STARTING_POINT_QUERY @deprecated(reason: "Use carsByPolicy query.")
  tokenConfigurationQuery(
    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT

    """
    Locale is combination of ISO 639-1 langugage code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden
    For more details about locale, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LOCALE: String!

    """
    Car token of configuration selected. 
    For more details about car token, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Car%20token.aspx
    """
    TOKEN: String!

    """Component behavior - showAll (default), hideIncluded, hideInPackage"""
    COMPONENT_BEHAVIOR: COMPONENT_BEHAVIOR

    """
    This enum is used to decide what kind of components to be published. Current(Default one), Future, Past, FuturePast
    """
    CONFIGURATION_WINDOW: CONFIGURATION_WINDOW

    """
    Holds client name of the requested system. For VISTA, it should hold vista
    """
    CLIENT: String
  ): DATA @deprecated(reason: "Use carByToken query.")
  tokenConfigurationDetailsQuery(
    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link:
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT

    """
    Locale is combination of ISO 639-1 langugage code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden
    For more details about locale, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LOCALE: String!

    """
    Car token of configuration selected.  
    For more details about car token, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Car%20token.aspx
    """
    TOKEN: String!

    """Component behavior - showAll (default), hideIncluded, hideInPackage"""
    COMPONENT_BEHAVIOR: COMPONENT_BEHAVIOR
    URL: String
  ): CONFIGURATION_DETAILS_QUERY @deprecated(reason: "Use carByToken query.")
  intersectionQuery(POLICY: String, CAR_TYPES: [String!], SALES_VERSIONS: [String!], ENGINES: [String!], GEARBOXES: [String!]): INTERSECTION_DATA @deprecated(reason: "Old CCH Query, without replacement.")
  clientConfigurationQuery(PARAMETERS: [CLIENT_CONFIGURATION_INPUT!]!): CLIENT_CONFIGURATION_QUERY @deprecated(reason: "Old CCH Query, without replacement.")
  countryConfigurationQuery(COUNTRY: String, LOCALE: String): COUNTRY_CONFIGURATION
  configurationData: CONFIGURATION_DATA @deprecated(reason: "Old CCH Query, without replacement.")

  """Generates a token based on the provided PNO34 data"""
  tokenGeneratorQuery(
    """
    This holds policy id, the last filter that has the possibility of limiting the offer of the NSC/ Partner etc.
    For more details about policy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Policys-(CCE).aspx
    """
    POLICY: String

    """Represents the configuration (PNO34+) which to generate a token for """
    CONFIG: TOKEN_GENERATOR_INPUT!

    """
    Locale is combination of ISO 639-1 language code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden
    For more details about locale, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LOCALE: String!

    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT

    """
    This enum is used to decide what kind of components to be published. Current(Default one), Future, Past, FuturePast
    """
    CONFIGURATION_WINDOW: CONFIGURATION_WINDOW

    """
    Holds client name of the requested system. For VISTA, it shoudl hold vista
    """
    CLIENT: String

    """
    This is used to decide what should be kept in selections of state; Enum has two values - allSelected, fullPackageContent and noPackageContent
    """
    SELECTION_STRATEGY: SELECTION_STRATEGY
  ): TOKEN_CHANGE @deprecated(reason: "Use carByToken{configurationByPolicy(...)} ")

  """Transfers from one token to another."""
  tokenTransferQuery(
    """Represents the token which to transfer from"""
    FROM_TOKEN: String!

    """Represents the token which to transfer to"""
    TO_TOKEN: String!

    """
    Locale is combination of ISO 639-1 language code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden
    For more details about locale, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LOCALE: String!

    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT
  ): TOKEN_CHANGE @deprecated(reason: "Old CCH Query, use carByToken{configurationByPolicy(...)}.")
  partnerConfigurationQuery(PARTNER: String!, SPEC_MARKET: String!, COUNTRY_CODE: String!, BRAND: String!, CLIENT: String!): PARTNER_CONFIGURATION_QUERY @deprecated(reason: "Old CCH Query, without replacement.")
  marketConfigurationById(id: String!): MARKET_CONFIGURATION_BY_ID @deprecated(reason: "Old CCH Query, without replacement.")
  marketConfigurations: MARKET_CONFIGURATIONS @deprecated(reason: "Old CCH Query, without replacement.")
  preconfigurationQuery(POLICY: String!, SPEC_MARKET: String!, LOCALE: String!): PRECONFIGURATION_QUERY @deprecated(reason: "Old CCH Query, without replacement.")
  preconfigurationsStartingPoint(
    """
    This holds policy id, the last filter that has the possibility of limiting the offer of the NSC/ Partner etc.
    For more details about policy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Policys-(CCE).aspx
    """
    POLICY: String

    """
    Locale is combination of ISO 639-1 langugage code and ISO 3166-1 Alpha-2 code, 
    
    
    For example: sv-SE is a swedish locale of Sweden
    For more details about locale, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Locales-(language---market).aspx
    """
    LOCALE: String

    """Client system name that uses preconfigurationsStartingPointQuery"""
    CLIENT: String

    """
    Provide a STRUCTURE_WEEK argument if you want to return PNO12:s surrounding the given structure week. 
    If no STRUCTURE_WEEK is provided the closest structure week based on the current date and time will be used.
    """
    STRUCTURE_WEEK: Int

    """
    Use the STRUCTURE_WEEK_FROM argument if you want to explicitly return PNO12:s of the given structure week and future structure weeks. 
    STRUCTURE_WEEK_FROM can be used in combination with the STRUCTURE_WEEK_TO argument to get PNO12:s which are in the defined span.
    """
    STRUCTURE_WEEK_FROM: Int

    """
    Use the STRUCTURE_WEEK_TO argument if you want to explicitly return PNO12:s up until the given structure week. 
    STRUCTURE_WEEK_TO can be used in combination with the STRUCTURE_WEEK_FROM argument to get PNO12:s which are in the defined span.
    """
    STRUCTURE_WEEK_TO: Int

    """
    This is used to define price model you want to fetch from CCH. This is optional field
    For more details about price configuration input, please refer this link : 
    [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Price-configuration-in-queries.aspx
    """
    PRICE_CONFIG_IN: PRICE_CONFIGURATION_INPUT
  ): STARTING_POINT_QUERY @deprecated(reason: "Use preConfiguredCarsByPolicy query.")

  """
  ### [Cars By Market](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIgMygAxwWMXgCZaGdhUww20phV4WDz96aQ4KAOkQAF8gA&referrer=operation_collections&variant=staging)
  
  Cars by market returns a list of all the cars that are available in the market AND your `apollographql-client-name` header.
  """
  carsByMarket(market: String): MarketConfigurationList!
  getSafetyRating(safetyRatingInput: [SafetyRatingInput!]!): [SafetyRating!]!

  """
  ### [Car by CarKey](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIgOceoNvSYbDBAAM0vh3ltp1AEzUbDAsGP4cbm4BAW4gAL5AA&referrer=operation_collections&variant=staging)
  If you have a `carKey` and what to extract the information on that, use this query! 
  """
  carByCarKey(carKey: CarKeyInput!): Car!

  """
  ### [Cars By CarKeys](https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgzghgbgpgJgYQPYBsUwMYBcCWSB2AknCAFwgAsGA7AMwCc9ARgGYC0AjCxx2xfTACsbCBg4A2NrQAcLCtPlxptWuJAAacNHjI0mXAQCi%2BLACcAnsTIhpMeh0HUATDDbU4EJnybTJEAAwUcGxM4rIYcHDUGCz0GCAAvkA&referrer=operation_collections&variant=staging)
  Resolve multiple carKeys at once.
  """
  carsByCarKeys(carKeys: [CarKeyInput!]!): [Car!]!
  prismInfo(brand: Brand, carTypeContext: String, engineContext: String, gearboxContext: String, locale: String!, market: String, modelYear: Int, preview: Boolean, salesVersionContext: String, structureWeek: Int): PrismInfo!
  stockCars(filter: CLESearchFilterWithDistributionChannel!): CLEResponse!
  stockConsignmentCars(filter: CLESearchFilter!): CLEResponse!
  stockOnlineCars(filter: CLESearchFilter!): CLEResponse!
  stockSubscriptionCars(filter: CLESearchFilter!): CLEResponse!
  stockWholesaleCars(filter: CLESearchFilter!): CLEResponse!
  fyonVisualization(
    """A 9 digit Vehicle's Factory Order Number."""
    fyon: Float!
  ): VisualizationList!
  vinVisualization(
    """A 17 character Vehicle Identification Number."""
    vin: String!
  ): VisualizationList!
}

type Range {
  max: Float
  min: Float
  name: String
}

type REQUIRED_CHANGES {
  """Selected components"""
  selected: COMPONENT!

  """Token for the given selection/ deselection"""
  token: String

  """Active indicator"""
  active: Boolean!

  """
  Components that are removed due to the selection/ deselection of respective component
  """
  componentsRemoved: [COMPONENT!]

  """
  Components that are added due to the selection/ deselection of respective component
  """
  componentsAdded: [COMPONENT!]

  """Price difference based current selection"""
  priceDifference: Float

  """
  Holds price information
  For more details about pricing strategy, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """State that contains long token and other information"""
  state: STATE
  _state: String
  _energyEfficiency: String
  _priceConfigInput: String
  _locale: String
  _currentState: String
  _baseState: String
  dataVisibility: CarVisibility!
  car: Car
  priceSummary(priceConfigInput: CchPriceConfigurationInput): ComponentPriceSummary
}

"""
Represents the required configuration change, in order to transition to this configuration.
See **(link)[https://studio.apollographql.com/graph/Onstage-Graphql-Federation/explorer?explorerURLState=N4IgJg9gxgrgtgUwHYBcQC4QEcYIE4CeABAMICGeAQgQCoQDWyJESAZgJYDmMeZK7LZnAAOLZCgDOzNlx58BSCQAoAOkiJEAJCgbJ0RAMoo87JJwCEajZoA20MjYT6jJs5fVbhJqAmkdOAJJIwjAo%2BgAK3r4s-nL8LEEhKO4AlETAVkRQFNR0jEhKOvn62rpIaRkeGlAxsrzxSLllhWUlRcgVmRrVFADSCARd3TV2eBL6NSJiqMooBMJOpADyADJLAEqdVd0aAHT75HhCokjiQxoAvudEMMIAFhA2Eij47AjjWRBTpzOF84sAVXCAAlVgYaABRdYATS2Ox2%2B12h2O0xQ1yu2w0EGEDQ%2BkxO4lm-30S3CNACSwAcnD4XsDhQUT80ZiiBjacIyFB6GROO8Jl8Cb85gsIgBBEi9UUAcQhNNpiORAtR6KGbNZagxalYvE4iFQpAZSqZRBYBqORvE6UyNTACGttW49QUEit2zIwmENjeYBIdzIZgQrvZUQM8DgFAISi87B8fi4iVCJWjsYdCZQKUqtI0ycDmazGjIcAgMFQ10uKpZ%2BNRElFYFtYCDWZtdpZ1RYL1QSjs2UcJW7DgQcqzYHYEk9ZAIlMLubL8IAbg5cLPy63uuxw7zG-mNDwbMv1au1Tsj8MLTN1ggi3OEA287Tm7OaqhxF37L2tP3HEPaSOxzYJ1OiBbtuC42Euq4rtuRDrjyM4Qd0u77iex4Vih2ztOod7dHYZiqpkGIXCAAA0IALiYZAAEaOBIGAgHmKggBhDH6AxAwAFJ3BRUpQOwSzsGxAQAgAXgEACMlLsAEEhBOsACsUAkAEABsAT0MIAAaABqJBsQAnLs7EAO4UQATAAHsI0IAMw2JpZAAOoAIq8ZJZkALI0KK7ArDpQlgFKABiBD%2BWBABaAAMlJzhRcChcIoVWZpBDQup6zCKZAAsLkBAQbkACIBO5kKGW5ABWYkGEJ0LuaVlAQh5EIlXlEKyfllAGB5opNV1%2BU9XlfVdWxEKhR1NCUFKATsIZ7DWUlUBwJpMBgBCUUxXFCVJSlaWZdluUFUVjVlRVVU1XVDVNS1bWjQN3W3b1hlDSNHnjY5nklZCBCvV1lJ5QCJlfYZP30AQAIQodzXeb5YDAmxonWesonzZp6mhfZml4AEpUQHthVlRC0lIJSNhcZppUhdFSBubxNgoAA7DJ8lSgCLlsXlNDhdNPlsTA0L2aJNiYxA7D5Zd-XsKwBhmfTSByVATMs5poOcJD3O8-zgvsACpXg11QThRI7HhQg6mUALWPsDQomUACk3TTFAUoCNymTesTPa4Z6z8bpKzAhI7DQzYhlOypNiUJQjnhSglDrOFzNczzfNm0LoPgxC4uS9Lsvy3xbHhACAXOfHatJ%2BwAM-X9QSiWArCObsMBCaJWDAjYulLDKVkQnOGXCKJNCORlBAABwEOEAC0dwZesNj2VKo%2B9LpYDUCgJn2SZKzQAxRGZAxn52hgRAMRIc6jwYEKb9vIA5nGgTBKEzHAQxSDTvfDG2qwZAwDT5-bDvb57yxIAj4nzPiAfCW8kCEQuEAA&variant=staging]**
"""
type RequiredChange {
  baseCarKey: CarKey!
  carKey: CarKey!
  component: CarComponent!
  componentsAdded: [CarComponent!]
  componentsRemoved: [CarComponent!]
  offerKey: JSON
  rootBaseCarKey: CarKey!
  rootCarKey: CarKey!
  dataVisibility: CarVisibility!
  priceSummary(priceConfigInput: PriceConfigurationInput): ComponentPriceSummary
}

type RequiredChangeComponentPriceSummary implements ComponentPriceSummary {
  all: ComponentPriceFields
  code: String!
  price: PriceAmount
  type: String!
}

type Reservation {
  reservedAt: String
  reservedThrough: String
}

enum ROUNDING_STRATEGY {
  alwaysRound
  alwaysDecimals
  decimalsIfNeeded
  roundToNearestTen
}

"""What rounding strategy to use whn rounding prices"""
enum RoundingStrategy {
  alwaysDecimals
  alwaysRound
  decimalsIfNeeded
  roundToNearestTen
}

type S_MESSAGE {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: S_MESSAGE_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): PrismGenericContent
  globalName: String
  globalShortName: String
}

type S_MESSAGE_DISPLAY_TYPE {
  key: String
  name: String
}

type SAFETY_RATING {
  modelCode: String
  safetyRating: String
  safetySystem: [SAFETY_SYSTEM!]!
}

type SAFETY_SYSTEM {
  id: String
  name: String
  available: String
  value: Float
}

type SafetyRating {
  error: String
  locale: String
  modelCode: String
  modelYear: Int
  pno12: String
  responseCode: String
  safetyRating: String
  safetySystem: [SafetySystem!]
  specificationMarket: String
}

input SafetyRatingInput {
  locale: String
  modelYear: Int!
  pno12: String!
  published: Boolean!
  specificationMarket: String!
}

type SafetySystem {
  available: String
  id: String
  name: String
  value: Float
}

type SALES_MODEL_SETTING {
  salesModel: String
  default: Boolean
  componentBehavior: COMPONENT_BEHAVIOR!
  policy: String
  priceStrategy: PRICE_STRATEGY
  showFullTaxBreakdown: Boolean
  showTyreLabels: Boolean
  showWinterTyreLabels: Boolean
  roundingStrategy: ROUNDING_STRATEGY
  customerTypes: [CUSTOMER_TYPE]
  cceEnvironment: String
  customerTypePriceInputs: [CUSTOMER_TYPE_PRICE_INPUT]
  hidePrices: Boolean
  clients: [String]
}

type SALES_MODEL_USP {
  """Name of the offer received for docm"""
  name: String!

  """Image url"""
  image: String!

  """Offer ID"""
  id: String!

  """Full description of offer"""
  fullDescription: String!

  """Short description of offer"""
  description: String!
}

type SALES_VERSION {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: SALES_VERSION_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
}

type SALES_VERSION_DISPLAY_TYPE {
  key: String
  name: String
}

type SalesLevelContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  formattedRule: String
  image: ImageProperty
  key: String!
  meta: SystemMeta
  salesLevelType: String!
  shortDescription: StringProperty
  video: VideoProperty
}

"""Unapplied Sales Level exceptions"""
type SalesLevelException {
  content: EnrichedSalesLevelContent!
  rule: ExceptionRule!
}

type SalesModelTypeSubscriptionPrice {
  contractLengthInMonths: Int
  mileage: Int
  mileageUom: String
  monthlyGrossAmount: Float
  monthlyNetAmount: Float
  monthlyVatAmount: Float
}

type SalesVersion {
  code: String
  globalName: String
}

type SATISFIED_PNO12 {
  state: STATE
  pno12: String
  modelYear: Int!
  specMarket: String!
  editionOption: String
}

type Seats {
  numberOfSeats: Int
  numberOfSeatsCode: String
  numberOfSeatsDescriptions: [Description!]
}

enum SELECTION_STRATEGY {
  allSelected
  fullPackageContent
  noPackageContent
  keepAll
}

type SETTING {
  type: String
  displayName: String
  values: [SETTING_COMPONENT!]
}

type SETTING_COMPONENT {
  type: String
  id: String
  displayName: String
  image: String
  prices: [PRICING]
}

type SMessage {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!

  """Content carries localized information about the component."""
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarComponentContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type STARTING_POINT_LEVEL {
  """
  Key is an unique string created by concatenating key of all of it's parents.
  """
  key: String

  """Id holds the unique identification string for the respective item"""
  id: String

  """
  This is type of the item. 
  Various types are MODEL_FAMILY, MODEL, MODEL_YEAR, FAMILY, SALES_VERSION, DRIVELINE, ENGINE, GEARBOX, CAR_TYPE, SEATS, DRIVE_TYPE, FUEL_TYPE etc.
  """
  type: String

  """This field is not used in starting point query"""
  displayNamePrefix: String

  """DisplayName is nothing but the short description of an item"""
  displayName: String

  """
  DrivelineLongDisplayName is nothing but the long description of an item
  """
  drivelineLongDisplayName: String

  """Group holds the group name of the component/ item"""
  group: String

  """
  This field shows the consolidated view of all selected items and token etc
  """
  displayCarData: CAR_CONFIGURATION_DATA

  """This contains model year of a car"""
  modelYears: [Int!]

  """
  This field holds pricing details such as price, payment method, pricelist etc.
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  prices: [PRICING!]
  highlightedFeatures(relative: Boolean): [FEATURE]
  features: [FEATURE]

  """Description holds the long description of an item"""
  description: String

  """
  This field contains the technical data such as fuelType, gearboxType, acceleration etc whatever received from SCNG and WLTP fields received from REDA or weight fields from CPAM
  For more details about technicl data, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/technicalData.aspx
  """
  technicalData: [TECHNICAL_DATA!]

  """This field is not used in starting point query"""
  availableChildren: [String!]

  """Nested children can be defined here"""
  children(type: String, id: String): [STARTING_POINT_LEVEL]

  """This holds the sort order of the item"""
  sortOrder: Int

  """This gives the media type and image url whatever received from CAS"""
  startingPointMedia: [STARTINGPOINT_MEDIA]

  """
  Configuration information provides the abstract data of configuration such as model family, sales version family, seats etc.
  """
  configurationInformation: CONFIGURATION_INFORMATION

  """
  This field holds various price details such as pretax, taxes, vat, price breakdown etc
  For more details about pricing details, please refer this link : https://intranet.volvocars.net/sites/CCH/SitePages/Pricing-details.aspx
  """
  pricingDetails: PRICING_DETAILS
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  _states: [String!]
  priceSummary(priceConfigInput: CchPriceConfigurationInput): CarPriceSummary

  """Car from startingPoint state"""
  car: Car
}

type STARTING_POINT_QUERY {
  _states: [String!]
  _locale: String!

  """This is not used in starting point query"""
  availableChildren: [String!]

  """This field holds set of children elements listed out in nested way"""
  children(type: String, id: String, policy: String): [STARTING_POINT_LEVEL!]
  sortedOnPrice(priceConfigInput: CchPriceConfigurationInput, sortMissingPriceAs: NullSortingStrategy!): STARTING_POINT_QUERY!
}

type STARTINGPOINT_MEDIA {
  """URL of the given starting point media type"""
  url: String!

  """Enum that holds starting point media type : Backgound or Icon or Car"""
  type: STARTINGPOINT_MEDIA_TYPE!
}

enum STARTINGPOINT_MEDIA_TYPE {
  Background
  Icon
  Card
}

type STATE {
  """
  This is short token of a configuration which can live for short time, (few days to few weeks)
  """
  short: String

  """
  This is usually called as car token or full token which can live until the configuration is valid at CCE.
  
  
  To know more about car token : please follow this link [URL](https://en.wikipedia.org/wiki/URL) .
  """
  token: String

  """
  This holds the configuration state when the configuration is started with starting point
  """
  userFriendly: String
  startingConfiguration: String

  """This holds the current configuration state"""
  currentConfiguration: String

  """This holds the calculated structure week of a configuration"""
  structureWeek: Int
}

type Steering {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!

  """Content carries localized information about the component."""
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): CarComponentContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type STEERING {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: STEERING_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
}

type STEERING_DISPLAY_TYPE {
  key: String
  name: String
}

type STOCK_CAR_CONFIGURATION_QUERY {
  PRICE_CONFIG_IN: PRICE_CONFIGURATION_OUTPUT!
  LOCALE: String!
  PNO34_PLUS_OPTIONS: String!
  DUPLICATES_IDENTIFIER: String!
  specMarket: String
  MODEL_YEAR: Int!
  DEALER_ID: String!
  CLE_CAR_TYPE: String!
  vin: String
  modelFamily: MODEL_FAMILY!
  media: MEDIAS
  color: COL!
  upholstery: UPH
  gearbox: GEARBOX!
  engine: ENGINE!
  body: BODY!
  steering: STEERING!
  salesVersion: SALES_VERSION!
  marketingCode: MARKETING_CODE!
  options: [OPT!]!
  features: [FEATURE!]
  standardFeatures: [FEATURE!]
  packages: [PACKAGE!]!
  overview: STOCK_CAR_OVERVIEW!
  technicalData: TECHNICAL_DATA_DETAILS
  configurationInformation: CONFIGURATION_INFORMATION
  order: STOCK_CAR_ORDER
  isWltp: Boolean
  nedc: STOCK_CAR_NEDC
  wltp: STOCK_CAR_WLTP
}

type STOCK_CAR_CONTRACT_LENGTH {
  default: Int
}

type STOCK_CAR_MILAGE_OPTION {
  contractLength: Int
  price: Float
  priceExclVat: Float
  displayPrice: String
  parameter: Int
  mileageUom: String
  displayParameter: String
  relativeDisplayPrice: String
  relativePrice: Float
  lineItems: [STOCK_CAR_PRICE_LINEITEM]
  details: STOCK_CAR_PRICE_DETAILS
}

type STOCK_CAR_MILEAGE {
  values: [STOCK_CAR_MILAGE_OPTION]
  default: Int
}

type STOCK_CAR_NEDC {
  combinedCO2: Float
  cO2Unit: String
  weightedCombinedCO2: Float
  fuelConsumption: Float
  fuelConsumptionUnit: String
  weightedCombinedFuelConsumption: Float
  urbanFuelConsumption: Float
  urbanFuelConsumptionUnit: String
  exurbanFuelConsumption: Float
  exurbanFuelConsumptionUnit: String
  electricRange: Float
  electricRangeUnit: String
  electricEnergyConsumption: Float
  electricEnergyConsumptionUnit: String
  isOfficial: Boolean
}

type STOCK_CAR_ORDER {
  customerOrderReferenceNumber: String
  deliveryDate: String
  commonOrderNumber: String
  fyon: String
  commonStatusPoint: Int
  brandStatusPoint: Int
  factoryCompleteDate: String
  intermediateDestination: String
  dealerOrderNumber: String
  lastDayForSpecChange: String
  commonOrderType: Int
  visibilityIndicator: Boolean
  pendingTransfer: Boolean
  availableForUnconsentedTrade: Boolean
}

type STOCK_CAR_OVERVIEW {
  displayName: String
  energyEfficiency: ENERGY_EFFICIENCY
  fuelType: FUEL_TYPE
  gearboxType: GEARBOX_TYPE
  driveType: DRIVE_TYPE
  engineType: ENGINE_TYPE
  salesModelUsp: [SALES_MODEL_USP!]
  pricingDetails: STOCK_CAR_PRICING_DETAILS
  _stockCarPricingInput: String
  _energyEfficiency: String
  priceSummary(priceConfigInput: CchPriceConfigurationInput): CarPriceSummary
}

type STOCK_CAR_PRICE_DETAILS {
  vatRate: Float
  priceExceedMileage: Float
  prepaymentAmount: Float
  totalCostExclVat: Float
  totalCostInclVat: Float
  currency: String
}

type STOCK_CAR_PRICE_LINEITEM {
  name: String
  price: Float
}

type STOCK_CAR_PRICING_DETAILS {
  price: Float
  priceExclVat: Float
  currency: String
  displayPrice: String
  mileage: STOCK_CAR_MILEAGE
  contractLength: STOCK_CAR_CONTRACT_LENGTH
  name: String
  description: String
}

type STOCK_CAR_WLTP {
  combinedCO2: Float
  cO2Unit: String
  weightedCombinedCO2: Float
  fuelConsumption: Float
  fuelConsumptionUnit: String
  weightedCombinedFuelConsumption: Float
  lowFuelConsumption: Float
  lowFuelConsumptionUnit: String
  mediumFuelConsumption: Float
  mediumFuelConsumptionUnit: String
  highFuelConsumption: Float
  highFuelConsumptionUnit: String
  extraHighFuelConsumption: Float
  extraHighFuelConsumptionUnit: String
  lowCo2: Float
  lowCo2Unit: String
  mediumCo2: Float
  mediumCo2Unit: String
  highCo2: Float
  highCo2Unit: String
  extraHighCo2: Float
  extraHighCo2Unit: String
  cdElectricEnergyConsumption: Float
  cdElectricEnergyConsumptionUnit: String
  cityElectricRange: Float
  cityElectricRangeUnit: String
  electricRange: Float
  electricRangeUnit: String
  electricEnergyConsumption: Float
  electricEnergyConsumptionUnit: String
  isOfficial: Boolean
}

type StockVehicle {
  availability: Availability
  configuration: Configuration
  dealer: Dealer
  demoCar: Boolean
  distributionChannelType: String
  duplicatesIdentifier: String
  environmentalData: CLEEnvironmentalData
  id: String
  market: Market
  model: Model
  modelYear: String
  order: Order
  price: Price
  reservation: Reservation
  specification: Car
  structureWeek: String
  vin: String
}

type StockVehicleHit {
  vehicle: StockVehicle!
}

"""String Property"""
type StringProperty {
  """label describing value"""
  label: String
  value: String
}

type SubscriptionPrice {
  b2b: CustomerTypeSubscriptionPrice
  b2c: CustomerTypeSubscriptionPrice
  currency: String
}

"""Metadata"""
type SystemMeta {
  entityId: String!
  maxModelYear: Float!
  minModelYear: Float!
  state: String
  systemName: String
}

input TaxationInput {
  carType: String!
  date: String!
  modelYear: String!
}

type TECHNICAL_DATA {
  """Fuel capacity of the vehicle - received from SCNG"""
  fuelCapacity: Int

  """Horsepower of the vehicle - received from SCNG"""
  horsepowerAmount: Int

  """Horsepower electric fuel of vehicle - received from SCNG"""
  horsepowerAmountElectricFuel: Int

  """Kilowatts amount of vehicle - received from SCNG"""
  kilowattsAmount: Int

  """Kilowatts elecric fuel of vehicle - received from SCNG"""
  kilowattsAmountElectricFuel: Int

  """Height of the vehicle """
  height: Int

  """Width of the vehicle"""
  width: Int

  """Width mirrors of vehicle"""
  widthMirrors: Int

  """Length of the vehicle"""
  length: Int

  """Fuel type display name of vehicle"""
  fuelTypeDisplayName: String

  """Engine type description of vehicle"""
  engineTypeDescription: String

  """Power train type display name of vehicle"""
  powerTrainTypeDisplayName: String

  """Environment classification of vehicle"""
  environmentalClassification: String

  """Transmission type of vehicle"""
  transmissionType: String

  """Engine category of vehicle"""
  engineCategory: String

  """Fuel type of vehicle"""
  fuelType: String

  """Fuel type details of vehicle"""
  fuelTypeDetails: FUEL_TYPE

  """Gearbox type of vehicle"""
  gearboxType: GEARBOX_TYPE

  """Driveline type of vehicle"""
  driveType: DRIVE_TYPE

  """Engine type of vehicle"""
  engineType: ENGINE_TYPE

  """Slug of vehicle"""
  slug: String

  """Engine slug of vehicle"""
  engineSlug: String

  """Gearbox of vehicle"""
  gearboxSlug: String

  """Acceleration of vehicle"""
  acceleration: Float

  """This field is not used"""
  co2: CO2

  """Energy efficiency of the vehicle with best, worst and range etc"""
  energyEfficiency: ENERGY_EFFICIENCY

  """Highlights of vehicle"""
  highlights: [HIGHLIGHT]

  """Various fields of technical data received from SCNG, CPAM and REDA"""
  fields: [TECHNICAL_DATA_FIELD]

  """Safety rating, currently available only for Israel market"""
  safetyRating: SAFETY_RATING
}

type TECHNICAL_DATA_DETAILS {
  """Weight of the basic car - received from SCNG"""
  weight: Int

  """Fuel capacity of the vehicle - received from SCNG"""
  fuelCapacity: Int

  """Horsepower of the vehicle - received from SCNG"""
  horsepowerAmount: Int

  """Horsepower electric fuel of vehicle - received from SCNG"""
  horsepowerAmountElectricFuel: Int

  """Kilowatts amount of vehicle - received from SCNG"""
  kilowattsAmount: Int

  """Kilowatts elecric fuel of vehicle - received from SCNG"""
  kilowattsAmountElectricFuel: Int

  """Height of the vehicle """
  height: Int

  """Width of the vehicle"""
  width: Int

  """Width mirrors of vehicle"""
  widthMirrors: Int

  """Length of the vehicle"""
  length: Int

  """Fuel type display name of vehicle"""
  fuelTypeDisplayName: String

  """Engine type description of vehicle """
  engineTypeDescription: String

  """Power train type display name of vehicle"""
  powerTrainTypeDisplayName: String

  """Environment classification of vehicle"""
  environmentalClassification: String

  """Transmission type of vehicle"""
  transmissionType: String

  """Engine category of vehicle"""
  engineCategory: String

  """Fuel type of vehicle"""
  fuelType: String

  """Fuel type details of vehicle"""
  fuelTypeDetails: FUEL_TYPE

  """Gearbox type of vehicle"""
  gearboxType: GEARBOX_TYPE

  """Driveline type of vehicle"""
  driveType: DRIVE_TYPE

  """Engine type of vehicle"""
  engineType: ENGINE_TYPE

  """Slug of vehicle"""
  slug: String

  """Engine slug of vehicle"""
  engineSlug: String

  """Gearbox of vehicle"""
  gearboxSlug: String

  """Acceleration of vehicle"""
  acceleration: Float

  """Highlights of vehicle"""
  highlights: [HIGHLIGHT]

  """Various fields of technical data received from SCNG, CPAM and REDA"""
  fields: [TECHNICAL_DATA_FIELD]

  """Safety rating, currently available only for Israel market"""
  safetyRating: SAFETY_RATING

  """Wltp Status"""
  wltp: Boolean
}

type TECHNICAL_DATA_FIELD {
  """This field holds key of technical data received from SCNG/ CPAM/ REDA"""
  key: String

  """
  This field holds value of technical data received from SCNG/ CPAM/ REDA
  """
  value: String

  """This field holds unit of technical data received from SCNG/ CPAM/ REDA"""
  unit: String

  """
  This field holds display name of technical data received from SCNG/ CPAM/ REDA
  """
  displayName: String

  """
  This field holds source system name that the key, value & unit belong to
  """
  source: String

  """
  This field holds source display name that the key, value & unit belong to
  """
  sourceName: String
}

type TechnicalDataComponentContent {
  displayName: String
  formatted: String
  unit: String
}

type TechnicalFloatDataComponent {
  carKey: CarKey!
  key: String!
  unitSystem: UnitSystem!
  classification: EnvironmentalClassification
  content(locale: String!): TechnicalDataComponentContent
  drivingCycle: EnvironmentalDrivingCycle
  ipf: EnvironmentalIpf
  measurement: EnvironmentalMeasurement
  source: String
  unit: String
  value: Float
}

type TOKEN_CHANGE {
  """A list of components removed based on the changed state"""
  componentsRemoved: [COMPONENT!]

  """A list of components added based on the changed state"""
  componentsAdded: [COMPONENT!]

  """
  A list of error messages related to the changed state. If the change was successful this field returns null
  """
  errorMessages: [String]

  """Represents the changed state"""
  state: STATE

  """Holds pricing details for the changed state."""
  pricingDetails: PRICING_DETAILS

  """
  Holds the complete configuration scope, equal to what you get with tokenConfigurationQuery
  """
  configuration: DATA

  """
  Holds the complete configuration summary scope, equal to what you get with tokenConfigurationDetailsQuery
  """
  configurationDetails: CONFIGURATION_DETAILS_QUERY

  """Holds the state generated directly from the input"""
  stateFromInput: STATE
}

input TOKEN_GENERATOR_INPUT {
  structureWeek: String
  specMarket: String!
  modelYear: String!
  pno12: String!
  color: String
  upholstery: String
  sMessage: String
  options: [String!]
  packages: [String!]
  fixComponents: Boolean
}

type TokenState {
  """Holds short token"""
  short: String!

  """Holds long token"""
  token: String!

  """Holds user friendly token"""
  userFriendly: String

  """Holds structure week"""
  structureWeek: Int!
}

"""The Top views for door states of a car"""
type TopViewCompleteDoorsViewGroup {
  """Top view with doors and trunk open"""
  doorsAndTrunkOpen: ImageSizes

  """Top view with doors open"""
  doorsOpen: ImageSizes

  """Top view with left door and trunk open"""
  leftDoorAndTrunkOpen: ImageSizes

  """Top view with left door open"""
  leftDoorOpen: ImageSizes

  """Top view with right door and trunk open"""
  rightDoorAndTrunkOpen: ImageSizes

  """Top view with right door open"""
  rightDoorOpen: ImageSizes
}

"""Top view for the fueling/charging states of a car"""
type TopViewCompleteFuelingStateViewGroup {
  """Top view featuring the indicator for fueling/charging completed"""
  fueled: ImageSizes

  """Top view featuring the indicator for fueling/charging ongoing"""
  fueling: ImageSizes

  """Top view featuring the indicator for fueling/charging error"""
  fuelingError: ImageSizes

  """Top view featuring the indicator for fueling/charging paused"""
  fuelingPaused: ImageSizes

  """Top view featuring the indicator for fueling/charging scheduled"""
  fuelingScheduled: ImageSizes
}

"""The complete Top views of a car"""
type TopViewCompleteViewGroup {
  """Top view with all doors open"""
  allDoorsOpen: ImageSizes

  """The Top views for front door states of a car"""
  frontDoors: TopViewCompleteDoorsViewGroup

  """Top views for the car's fueling states"""
  fueling: TopViewCompleteFuelingStateViewGroup

  """The Top views for rear door states of a car"""
  rearDoors: TopViewCompleteDoorsViewGroup

  """Top view with hidden roof"""
  roofHidden: ImageSizes

  """Standard Top view"""
  standardView: ImageSizes

  """Standard Top view with retracted side mirrors"""
  standardViewRetractedMirrors: ImageSizes

  """Top view with trunk open"""
  trunkOpen: ImageSizes

  """Top view with trunk open and retracted side mirrors"""
  trunkOpenRetractedMirrors: ImageSizes
}

"""The Top view component layers for door states of a car"""
type TopViewComponentDoorStateViewGroup {
  """The component layers for the left door states"""
  left: TopViewDoorStateViewGroup

  """The component layers for the right door states"""
  right: TopViewDoorStateViewGroup

  """The component layers for the trunk door states"""
  trunk: TopViewDoorState
}

"""The Top view component layers for the fueling/charging states of a car"""
type TopViewComponentFuelingStateViewGroup {
  """
  The component layer featuring the indicator for fueling/charging mechanism connected
  """
  fuelConnected: ImageSizes

  """The component layer featuring the indicator for fueling/charging error"""
  fuelIndicatorError: ImageSizes

  """
  The component layer featuring the indicator for fueling/charging completed
  """
  fuelIndicatorFueled: ImageSizes

  """
  The component layer featuring the indicator for fueling/charging ongoing
  """
  fuelIndicatorFueling: ImageSizes

  """
  The component layer featuring the indicator for fueling/charging paused
  """
  fuelIndicatorPaused: ImageSizes

  """
  The component layer featuring the indicator for fueling/charging scheduled
  """
  fuelIndicatorScheduled: ImageSizes

  """The component layer featuring the closed fueling/charging port"""
  fuelPortClosed: ImageSizes

  """The component layer featuring the open fueling/charging port"""
  fuelPortOpen: ImageSizes
}

"""The Top view component layers for the side mirror states of a car"""
type TopViewComponentMirrorStateViewGroup {
  """The component layers for the left side mirrors"""
  left: TopViewMirrorStateViewGroup

  """The component layers for the right side mirrors"""
  right: TopViewMirrorStateViewGroup
}

"""The top view component layers for the parts of a car"""
type TopViewComponentStateViewGroup {
  """The component layers for the car's air cleaning states"""
  airCleaning: TopViewComponentViewGroup

  """The component layers for the car's alarm indicator states"""
  alarmIndicator: TopViewComponentViewGroup

  """The component layer for the base of the car"""
  baseCar: ImageSizes

  """The component layers for the car's cooling states"""
  cooling: TopViewComponentViewGroup

  """The component layers for the car's doors"""
  doors: TopViewComponentDoorStateViewGroup

  """The component layers for the car's exterior lights states"""
  exteriorLights: TopViewComponentViewGroup

  """The component layers for the car's fueling states"""
  fueling: TopViewComponentFuelingStateViewGroup

  """The component layers for the car's heating states"""
  heating: TopViewComponentViewGroup

  """The component layers for the car's interior lights states"""
  interiorLights: TopViewComponentViewGroup

  """The component layers for the car's mirrors"""
  mirrors: TopViewComponentMirrorStateViewGroup

  """The component layer for the roof of the car"""
  roof: ImageSizes

  """The component layers for the car's window states"""
  window: TopViewComponentWindowStateViewGroup
}

"""The top view component state groups"""
type TopViewComponentViewGroup {
  """Top view component states for the current group"""
  images: [ImageSizes!]
}

"""The component layers for the car's window states"""
type TopViewComponentWindowStateViewGroup {
  """The component layers for the car's window based on door states"""
  doors: TopViewComponentDoorStateViewGroup

  """The component layers for the car's roof window"""
  roof: ImageSizes
}

"""The Top view component layers for door states"""
type TopViewDoorState {
  """The component layers for the closed door"""
  closed: ImageSizes

  """The component layers for the open door"""
  open: ImageSizes
}

"""The Top view component layers for door states of a car"""
type TopViewDoorStateViewGroup {
  """The component layers for front door states"""
  front: TopViewDoorState

  """The component layers for rear door states"""
  rear: TopViewDoorState
}

"""The Top view component layers for the side mirror states"""
type TopViewMirrorStateViewGroup {
  """The component layers for the extended side mirrors"""
  extended: TopViewDoorState

  """The component layers for the retracted side mirrors"""
  retracted: TopViewDoorState
}

"""The Top views of a car"""
type TopViewViewGroup {
  """The complete Top views of a car"""
  complete: TopViewCompleteViewGroup

  """The top view component layers for the parts of a car"""
  components: TopViewComponentStateViewGroup
}

type TransactionPriceTax {
  id: String
  pretaxWithTaxes: PriceAmount
  pretaxWithTaxesExclVat: PriceAmount
  type: String
  vatAmount: PriceAmount
  vatRate: Float
}

enum TransmissionType {
  AUTOMATIC
  MANUAL
}

"""Transmission Type Property"""
type TransmissionTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: TransmissionType
  valueDescription: String
}

"""Transmission types"""
type TransmissionTypes {
  automatic: TransmissionTypeProperty!
  manual: TransmissionTypeProperty!
}

type TrimLevel {
  code: String
  name: String
}

type TYRE_LABEL_MEDIA {
  url: String
  metadata: TYRE_LABEL_METADATA
}

type TYRE_LABEL_METADATA {
  position: String
  eprelUrl: String
  winter: Boolean
  source: String
}

"""
Holds URl:s to tyre energy efficiency labels and metadata for compliance with the the EU energy labelling and ecodesign legislation
"""
type TyreLabel {
  """Metadata for this tyre energy efficiency label"""
  metadata: TyreLabelMetadata!

  """The url to the tyre label image"""
  url: String!
}

"""Energy Efficiency Label metadata"""
type TyreLabelMetadata {
  """URL to the specific tyre on the EPREL website."""
  eprelUrl: String!

  """Tyre position, one of: all/front, rear, unknown"""
  position: String!

  """Winter/snow tyre"""
  winter: Boolean!
}

enum UnitSystem {
  IMPERIAL
  METRIC
}

type UPGRADED_FROM {
  """Price of the configuration"""
  price: Float

  """Pretax price of the configuration"""
  pretaxPrice: Float

  """Display price of the configuration"""
  displayPrice: String

  """Pretax display price of the configuration"""
  pretaxDisplayPrice: String

  """This gives long description of the given type"""
  description: String

  """Id holds the unique identification string for the respective item"""
  id: String

  """
  Define various types such as model, family, modelFamily, trimLevel, driveline, seats
  """
  type: String

  """This gives short description of the given type"""
  displayName: String
}

type UPH {
  """Code of the component"""
  name: String

  """This field is not used"""
  language: String

  """Structure week start of the component"""
  structureWeek: Int

  """
  Pno34 Plus that contains Market, model year and Pno34 including standard wheel/ selected wheel option, accessories, packs
  For more details about Pno34Plus, please refer this link : [URL] https://intranet.volvocars.net/sites/CCH/SitePages/PNO34+.aspx
  """
  pno34Plus: String

  """Model year of configuration"""
  modelYear: Int

  """Marketing code"""
  marketingCode: Int

  """Type of component - for example COL for color"""
  type: String

  """Price of the component"""
  price: Float

  """
  Relative price of the component (diff calculated based on current selection)
  """
  relativePrice: Float

  """This field is not used"""
  text: String

  """This field is not used"""
  pno12: String

  """
  To hold the available state. True when component is available to select, false otherwise
  """
  available: Boolean

  """
  To hold the selected state. True when component is selected in configuration already
  """
  selected: Boolean

  """
  To hold the included state. True when component is auto-selected due to must rule or component is part of pack etc
  """
  included: Boolean

  """Must included component (must rule) will be listed here"""
  required: [DEPENDENT!]

  """To hold the must rule with exchangeable components"""
  requiredExclusively: [[DEPENDENT!]!]

  """This field is not used"""
  group: String

  """Category of the component which is received from SCNG"""
  category: String

  """Categorization of the component which is received from SCNG"""
  categorization: CATEGORIZATION

  """Tags is defined in SCNG for the component"""
  tags: [String!]

  """Long Description of the component"""
  description: String

  """Short description of the component"""
  displayName: String

  """Display type of the component"""
  displayType: UPH_DISPLAY_TYPE

  """This field is not used"""
  usp: [String!]

  """Image url of the component in view-1"""
  image: String

  """Image url of the component in view-2"""
  image1: String

  """Image url of the component in view-3"""
  image2: String

  """Video url of the component"""
  video1: String

  """Video url of the component"""
  video2: String

  """
  The list of changes required when user selects/ deselects the respective component
  This also has list of the other components added/ removed upon selection of the component
  Token is given for selection/ deselection
  """
  requiredChanges: [REQUIRED_CHANGES!]

  """This defines whether the component is visible or not"""
  visible: Boolean
  missingPrice: Boolean

  """
  ComponentTypeId holds CPAM component type. For example : Engine - 4, SV- 5 etc
  """
  componentTypeId: String

  """
  This hold price information of the component
  For more details about pricing strategy, please refer this link : 
  [URL] https://intranet.volvocars.net/sites/CCH/SitePages/Pricing---strategy-to-implementation.aspx
  """
  pricing: [PRICING]

  """This gives classification (Group/ sub-group) of the component"""
  classification: CLASSIFICATION

  """This gives sort order"""
  sort: Int

  """User selected status. True when the component is user selected"""
  userSelected: Boolean

  """This gives component price"""
  componentPrice: PRICE_DATA

  """
  When a component gets included forcefully by package selection, the package code and short diplay name will be shown in this field
  """
  forcedBy: FORCED_BY

  """If this component is part of a another component, such as a package"""
  partOf: [PART_OF]

  """Co2 effect of component. This comes only for accessoires currently"""
  co2Effect: Boolean

  """
  Option type holds type of option. A-Accessory, L-Local Option, F-Factory Options
  """
  optionType: String

  """Feature is visualized in CAS"""
  casVisualized: Boolean

  """true if the value is in the startingPoint of the car."""
  default: Boolean
  _energyEfficiency: String
  _state: String
  _priceConfigInput: String
  _locale: String
  hex: String
  materials: [MATERIAL!]
  features: [FEATURE!]
  content(
    """Defaults to the query locale"""
    locale: String

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): UpholsteryContent
  globalName: String
  globalShortName: String
}

"""Generated hex code for color/ upholstery component"""
type UPH_DISPLAY_TYPE {
  key: String
  name: String
}

type Upholstery {
  carKey: CarKey!

  """The unique (in this type) code for this component. """
  code: String!
  content(
    locale: String!

    """Defaults to market part of locale"""
    market: String

    """Fetch working copy instead of published"""
    preview: Boolean = false
  ): UpholsteryContent
  globalName: String
  tags: [String!]
  type: CarComponentType
}

type UpholsteryContent implements CarComponentContent {
  description: StringProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  image: ImageProperty
  meta: SystemMeta
  shortDescription: StringProperty
  upholsteryCode: String!
  upholsteryMaterial: UpholsteryMaterialProperty
  video: VideoProperty
}

"""Unapplied Upholstery exceptions"""
type UpholsteryException {
  content: EnrichedUpholsteryContent!
  rule: ExceptionRule!
}

enum UpholsteryMaterial {
  CONNECT_TEXTILE_MICROTECH
  LEATHER
  LEATHERETTE
  MICROTECH_TEXTILE
  NAPPA_LEATHER
  NAPPA_LEATHER_TEXTILE
  NUBUCK_TEXTILE_NAPPA_LEATHER
  PREMIUM_TEXTILE
  TEXTILE
  TEXTILE_VINYL
  VENTILATED_NAPPA_LEATHER
  WOOL_BLEND
}

"""Upholstery material"""
type UpholsteryMaterialProperty {
  enumDescription: String
  formatted: String
  label: String
  value: UpholsteryMaterial
  valueDescription: String
}

"""Upholstery materials"""
type UpholsteryMaterials {
  connectTextileMicrotech: UpholsteryMaterialProperty!
  leather: UpholsteryMaterialProperty!
  leatherette: UpholsteryMaterialProperty!
  microtechTextile: UpholsteryMaterialProperty!
  nappaLeather: UpholsteryMaterialProperty!
  nappaLeatherTextile: UpholsteryMaterialProperty!
  nubuckTextileNappaLeather: UpholsteryMaterialProperty!
  premiumTextile: UpholsteryMaterialProperty!
  textile: UpholsteryMaterialProperty!
  textileVinyl: UpholsteryMaterialProperty!
  ventilatedNappaLeather: UpholsteryMaterialProperty!
  woolBlend: UpholsteryMaterialProperty!
}

enum UpstreamEntityType {
  ACCESSORY
  BODY
  COLOUR
  ENGINE
  FEATURE
  GEARBOX
  LOCAL_OPTION
  MARKETING_CODE
  MODEL
  OPTION
  PACKAGE
  PNO12
  SALES_VERSION
  SMESSAGE
  STEERING
  UPHOLSTERY
}

"""Upstream Entity Type Property"""
type UpstreamEntityTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: UpstreamEntityType
  valueDescription: String
}

type VALIDATION {
  """Boolean state to hold whether the policy is valid or not"""
  valid: Boolean
}

input VariableReference {
  name: String!
  value: String!
}

type VAT_POSITION_TOTAL {
  """VAT position - BEFORE, VAT, AFTER"""
  vatPosition: String

  """Amount before VAT or VAT Amount or after VAT amount"""
  vatPositionTotalAmount: Float
}

"""Video Property"""
type VideoProperty {
  """label describing value"""
  label: String
  mediaKey: String!
  mediaType: MediaType!
  url: String!
}

"""The interior and exterior views of a car"""
type Views {
  """The views featuring a car's exterior"""
  exterior: ExteriorViewGroup!

  """The views featuring a car's interior"""
  interior: InteriorViewGroup!
}

type VIIRTUAL_PRICE_LIST {
  uid: String
  parentUid: String
  policyUid: String
  name: String
  displayName: String
  description: String
  version: Int
  publishedAt: Float
}

type VistaReservation {
  dealerId: String!
}

"""The visualization of a given configuration/specification"""
type Visualization {
  """The features visualized in this combination"""
  features: VisualizedFeatures!

  """The icons for the different types of visualized features"""
  icons(
    """A hexadecimal color to use as the background for images."""
    backgroundColor: String
  ): Icons!

  """The different views available"""
  views(
    """A hexadecimal color to use as the background for images."""
    backgroundColor: String
  ): Views!
}

"""The visualizations of a given configuration/specification"""
type VisualizationList {
  """The different views available"""
  visualizations: [Visualization!]
}

"""A mapping between a CAS feature type, and a feature code"""
type VisualizedFeature {
  """
  The type of feature, according to CAS, that is included in the visualization
  """
  casType: CASFeatureType

  """The feature code being visualized"""
  code: String!
}

"""The features beings visualized in the current visualization set"""
type VisualizedFeatures {
  """The features included in this visualization set."""
  included: [VisualizedFeature!]!

  """The features visualized that only exist in this visualization set."""
  unique: [VisualizedFeature!]
}

type Weight {
  actualMass: Int
  actualMassUnit: String
  massInRunningOrderTotal: Int
  massInRunningOrderTotalUnit: String
  testMassIndividual: Int
  testMassIndividualUnit: String
}

enum WheelConstruction {
  BIAS_BELT
  DIAGONAL
  RADIAL
}

"""Wheel construction Property"""
type WheelConstructionProperty {
  enumDescription: String
  formatted: String
  label: String
  value: WheelConstruction
  valueDescription: String
}

"""Wheel constructions"""
type WheelConstructions {
  biasBelt: WheelConstructionProperty!
  diagonal: WheelConstructionProperty!
  radial: WheelConstructionProperty!
}

type WheelContent {
  accessoryCodes: [String!]
  classification: ClassificationProperty
  construction: WheelConstructionProperty
  description: StringProperty
  diameterInches: DecimalProperty
  displayName: StringProperty
  entityType: UpstreamEntityTypeProperty
  heightPercent: DecimalProperty
  image: ImageProperty
  loadIndex: IntProperty
  meta: SystemMeta
  numberOfSpokes: IntProperty
  optionCodes: [String!]
  position: WheelPositionProperty
  rimCode: String!
  shortDescription: StringProperty
  speedRating: StringProperty
  spokeType: WheelSpokeTypeProperty
  tireCode: String!
  type: WheelTypeProperty
  video: VideoProperty
  widthMillimeters: DecimalProperty
}

"""Unapplied Wheel exceptions"""
type WheelException {
  content: EnrichedWheelContent!
  rule: ExceptionRule!
}

enum WheelPosition {
  BACK
  FRONT
  FRONT_AND_BACK
}

"""Wheel Position Property"""
type WheelPositionProperty {
  enumDescription: String
  formatted: String
  label: String
  value: WheelPosition
  valueDescription: String
}

"""Wheel positions"""
type WheelPositions {
  back: WheelPositionProperty!
  front: WheelPositionProperty!
  frontAndBack: WheelPositionProperty!
}

enum WheelSpokeType {
  DOUBLE
  MULTI
  OPEN
  REGULAR
  V
  Y
}

"""Wheel Spoke Type Property"""
type WheelSpokeTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: WheelSpokeType
  valueDescription: String
}

"""Wheel spoke types"""
type WheelSpokeTypes {
  double: WheelSpokeTypeProperty!
  multi: WheelSpokeTypeProperty!
  open: WheelSpokeTypeProperty!
  regular: WheelSpokeTypeProperty!
  v: WheelSpokeTypeProperty!
  y: WheelSpokeTypeProperty!
}

enum WheelType {
  ALL_SEASON
  SUMMER
  WINTER
}

"""Wheel Type Property"""
type WheelTypeProperty {
  enumDescription: String
  formatted: String
  label: String
  value: WheelType
  valueDescription: String
}

"""Wheel types"""
type WheelTypes {
  allSeason: WheelTypeProperty!
  summer: WheelTypeProperty!
  winter: WheelTypeProperty!
}

type Wltp {
  co2Unit: String
  combinedCo2: Float
  electricEnergyConsumption: Float
  electricEnergyConsumptionUnit: String
  electricRange: Float
  electricRangeUnit: String
  extraHighFuelConsumption: Float
  extraHighFuelConsumptionUnit: String
  fuelConsumption: Float
  fuelConsumptionUnit: String
  highFuelConsumption: Float
  highFuelConsumptionUnit: String
  lowFuelConsumption: Float
  lowFuelConsumptionUnit: String
  mediumFuelConsumption: Float
  mediumFuelConsumptionUnit: String
  weightedCombinedFuelConsumption: Float
}